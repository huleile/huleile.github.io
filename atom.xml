<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>昭熙小乐的博客</title>
  
  <subtitle>人就活这一辈子, 理应活的飞扬跋扈</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.hully.fun/"/>
  <updated>2019-01-23T10:47:52.607Z</updated>
  <id>http://blog.hully.fun/</id>
  
  <author>
    <name>昭熙小乐</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu搭建Jenkins服务集成Github实现自动化构建</title>
    <link href="http://blog.hully.fun/Ubuntu%20%E6%90%AD%E5%BB%BAJenkins%E6%9C%8D%E5%8A%A1%E9%9B%86%E6%88%90Github%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA.html"/>
    <id>http://blog.hully.fun/Ubuntu 搭建Jenkins服务集成Github实现自动化构建.html</id>
    <published>2019-01-23T08:06:46.128Z</published>
    <updated>2019-01-23T10:47:52.607Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --><h4 id="关于Jenkins"><a href="#关于Jenkins" class="headerlink" title="关于Jenkins"></a>关于Jenkins</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;现代项目研发大部分都是敏捷开发，会经常进行产品的迭代发布，在一些前后端分离的团队里会经常发生前端研发人员与服务端研发人员同步不统一，服务端提交完代码忘记更新文档、重启服务器等，导致产出一些不必要的工作，降低了交付效率。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;Jenkins 是一套基于Java功能强大的应用程序，支持我们持续集成和持续交付项目，而不管我们使用什么平台，都可以很方便的进行监控持续重复的工作。</p><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul><li>Ubuntu 10.06 64位服务器</li><li>Java SDK</li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;Jenkins是一套开源的自动化服务，我们可以通过Ubuntu的软件包进行安装，也可以通过下载应用程序WAR文件进行安装。在接下来的文章中我们通过apt-get命令获取软件包进行安装:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openjdk-8-jdk</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install jenkins</span><br></pre></td></tr></table></figure><p></p><p>安装过程中会提示Jenkins会安装哪些依赖,输入Y回车傻瓜式安装即可, 安装完成时终端会展示给我们一个初始化密码串，接下来我们在浏览器进行Jenkins服务设置的时候会用到。</p><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start jenkins    # 启动服务</span><br><span class="line">sudo systemctl restart jenkins  # 重启服务</span><br><span class="line">sudo systemctl stop jenkins     # 停止服务</span><br></pre></td></tr></table></figure><p>由于systemctl不显示输出内容，我们可以通过其status命令来看Jenkins是否启动成功:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status jenkins</span><br></pre></td></tr></table></figure><p><img src="http://blog-img.muxiao520.com/jenkins%20status.png" alt="jenkins status"></p><h4 id="配置与插件安装"><a href="#配置与插件安装" class="headerlink" title="配置与插件安装"></a>配置与插件安装</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;我们已经成功启动了Jenkins服务，由于Jenkins服务默认使用的是8080端口，所以打开浏览器输入<code>IP:8080</code>就可以打开我们的Jenkins管理设置控制面板了，如果8080端口被占用了可以更改端口<br><img src="http://blog-img.muxiao520.com/jenkins-chrome-start1.png" alt="初始化Jenkins"></p><p>在输入框中填入我们刚才安装时给出的初始化密码，如果忘记了可以使用命令<code>cat /var/lib/jenkins/secrets/initialAdminPassword</code>查看初始化密码将其copy到输入框中，点击continue</p><p><img src="http://blog-img.muxiao520.com/jenkins-chrome-start2.png" alt="初始化Jenkins安装插件"></p><p>接下来是进行插件安装，我们可以根据其建议的插件安装，也可以自定义插件安装，在这里我们安装其建议的插件</p><p><img src="http://blog-img.muxiao520.com/jenkins-chrome-start3.png" alt="初始化Jenkins安装插件"></p><p>插件安装需要一段时间，这段时间我们可以做一些其他的工作，等安装成功后接下来就是初始化Admin用户</p><p><img src="http://blog-img.muxiao520.com/jenkins-chrome-start4.png" alt="初始化Jenkins创建管理员用户"></p><p>我们可以在表单里填入我们需要设置的管理员用户的信息，然后点击右侧的按钮<code>Save and Finish</code>；我们也可以点击左侧的按钮<code>Continue as admin</code>使用我们安装时初始化的用户(登录的时候采用admin/<strong>**</strong>)</p><p><img src="http://blog-img.muxiao520.com/jenkins-chrome-start5.png" alt="初始化Jenkins Finish"></p><p>这样我们基本的初始化设置就已经完成了，点击<code>Start using Jenkins</code>应该可以看到首页的面板了</p><p><img src="http://blog-img.muxiao520.com/jenkins-chrome-home.png" alt="Jenkins Console home"></p><h4 id="集成Github"><a href="#集成Github" class="headerlink" title="集成Github"></a>集成Github</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;所有的准备工作已经就绪，接下来就是要集成Github进行项目的自动化构建了。首先我们先创建一个项目</p><p><img src="http://blog-img.muxiao520.com/jenkins%20create%20job1.png" alt><br><img src="http://blog-img.muxiao520.com/jenkins-job-list.png" alt></p><p>点击列表里的项目进入其简介</p><p><img src="http://blog-img.muxiao520.com/jenkins-job-intro.png" alt></p><p>点击左侧的Configure进行项目的配置</p><p><img src="http://blog-img.muxiao520.com/jenkins-job-config.png" alt><br>&nbsp;&nbsp;&nbsp;&nbsp;在这里我是通过执行Shell脚本进行项目自动化构建的，其中<code>export PATH=******</code>,导出系统变量到脚本(主要是npm，否则会error npm is not command…)</p><p>&nbsp;&nbsp;&nbsp;&nbsp;因为我们的项目是基于Github进行托管的，在guthub项目里输入要集成的项目git url;<br>&nbsp;&nbsp;&nbsp;&nbsp;<code>Build Triggers</code>中选择通过web hook进行触发，webhook的地址我们通过<code>系统管理-&gt;系统设置#GitHub</code>点击<code>Advanced...</code>勾选<code>覆盖 Hook URL</code>，点击Save<br><img src="http://blog-img.muxiao520.com/jenkins-system-config.png" alt></p><p>最后将Hook URL设置到github项目的webhook中</p><p><img src="http://blog-img.muxiao520.com/jenkins-github-webhook.png" alt></p><p>然后就可以提交代码进行自动构建了，Jenkins通过Webhook触发构建</p><p><img src="http://blog-img.muxiao520.com/jenkins-job-build.png" alt></p><p>点击<code>Build History下Build Item</code>可以看到其构建时控制台的输出信息</p><p><img src="http://blog-img.muxiao520.com/jenkins-job-build-console.png" alt></p><p>至此，我们利用Jenkins+Github实现项目的自动化构建已经初步的完成了，后续我会继续研究Jenkins pipeline分步执行构建计划。</p><h5 id="Warning"><a href="#Warning" class="headerlink" title="Warning"></a>Warning</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;如果构建的过程中遇到<code>error: cannot open .git/FETCH_HEAD: Permission denied</code>，那是因为我们在安装Jenkins服务的时候，其默认为我们的服务器创建了一个<code>Jenkins</code>的用户，在执行Shell脚本构建的过程中，使用的就是这个Jenkins用户而非我们的系统用户<code>root</code>，我们可以将Jenkins设置为默认的用户<code>root</code></p><ol><li><p>首先查看在线安装jenkins的目录, 然后将这些目录设置成root用户访问<br><img src="http://blog-img.muxiao520.com/jenkins-as-root1.png" alt></p></li><li><p>修改Jenkins系统配置文件<code>/etc/default/jenkins</code>,将JENKINS_USER 和 JENKINS_GROUP 修改为root<br><img src="http://blog-img.muxiao520.com/jenkins-as-root2.png" alt></p></li><li><p>重启Jenkins服务<code>sudo systemctl restart jenkins</code></p></li></ol><p>如有不当之处，还望大神指点，谢谢。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --&gt;&lt;h4 id=&quot;关于Jenkins&quot;&gt;&lt;a href=&quot;#关于Jenkins&quot; class=&quot;headerlink&quot; title=&quot;关于Jenkins
      
    
    </summary>
    
      <category term="jenkins" scheme="http://blog.hully.fun/categories/jenkins/"/>
    
      <category term="github" scheme="http://blog.hully.fun/categories/jenkins/github/"/>
    
    
      <category term="ubuntu" scheme="http://blog.hully.fun/tags/ubuntu/"/>
    
      <category term="jenkins" scheme="http://blog.hully.fun/tags/jenkins/"/>
    
      <category term="github" scheme="http://blog.hully.fun/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04.64 利用 docker 部署 jenkins</title>
    <link href="http://blog.hully.fun/Ubuntu16.04.64%E5%88%A9%E7%94%A8docker%E9%83%A8%E7%BD%B2jenkins.html"/>
    <id>http://blog.hully.fun/Ubuntu16.04.64利用docker部署jenkins.html</id>
    <published>2019-01-17T07:47:19.168Z</published>
    <updated>2019-01-17T08:08:06.849Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --><h4 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h4><h5 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h5><p>Docker要求Ubuntu系统的内核版本高于3.10，所以呢我们要检测一下我们的服务器Ubuntu版本是否支持Docker,通过 <code>uname -r</code> 命令查看当前的内核版本。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>获取最新的Docker安装包<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -qO- https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure><p></p><p>安装完成后，会出现以下提示信息:<br><img src="http://blog-img.muxiao520.com/docker-20190115-1.png" alt="安装提示信息"><br>当需要以非root用户可以直接运行docker时，需要执行sudo usermod -aG docker hully命令，然后重新登录服务器，这里我们直接使用root用户直接操作。</p><h5 id="后台启动-docker-并设置为开机自启动"><a href="#后台启动-docker-并设置为开机自启动" class="headerlink" title="后台启动 docker 并设置为开机自启动"></a>后台启动 docker 并设置为开机自启动</h5><p><img src="http://blog-img.muxiao520.com/docker-20190115-2.png" alt="后台启动docker"></p><h4 id="安装-Jenkins-并运行"><a href="#安装-Jenkins-并运行" class="headerlink" title="安装 Jenkins 并运行"></a>安装 Jenkins 并运行</h4><h5 id="拉取-jenkins-镜像库"><a href="#拉取-jenkins-镜像库" class="headerlink" title="拉取 jenkins 镜像库"></a>拉取 jenkins 镜像库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker search jenkins</span><br><span class="line">docker pull jenkins</span><br></pre></td></tr></table></figure><p>拉取完Jenkins镜像后，在宿主机/home 目录下创建jenkins_home目录并赋予其给当前用户操作权限<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /home</span><br><span class="line">mkdir jenkins_home</span><br><span class="line">sudo chown -R 1000 /home/jenkins_home</span><br></pre></td></tr></table></figure><p></p><h5 id="后台启动-jenkins"><a href="#后台启动-jenkins" class="headerlink" title="后台启动 jenkins"></a>后台启动 jenkins</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -d --name jenkins -p 8080:8080 -p 50000:50000 -u root -v </span><br><span class="line">/home/jenkins_home:/var/jenkins_home</span><br></pre></td></tr></table></figure><p>打开浏览器输入输入 IP:8080按照提示输入生成的初始密码，后面傻瓜式安装就OK了，如果安装的时候忘记了初始化的密码，输入以下命令查看即可：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /home/jenkin_home/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><p></p><p>如果浏览器一直无法打开IP:8080</p><ul><li><p>检查防火墙是否开启</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure></li><li><p>查看端口是否正常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -an | grep 8080</span><br></pre></td></tr></table></figure></li><li><p>最后就是查看阿里云服务器安全组规则,添加安全组规则<br><img src="http://blog-img.muxiao520.com/docker-jenkins-%E7%BC%96%E8%BE%91%E5%AE%89%E5%85%A8%E7%BB%84.png" alt="添加安全组规则"><br>保存之后，重新打打开 IP:8080</p></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --&gt;&lt;h4 id=&quot;安装-Docker&quot;&gt;&lt;a href=&quot;#安装-Docker&quot; class=&quot;headerlink&quot; title=&quot;安装 Docker
      
    
    </summary>
    
      <category term="docker" scheme="http://blog.hully.fun/categories/docker/"/>
    
      <category term="jenkins" scheme="http://blog.hully.fun/categories/docker/jenkins/"/>
    
    
      <category term="ubuntu" scheme="http://blog.hully.fun/tags/ubuntu/"/>
    
      <category term="docker" scheme="http://blog.hully.fun/tags/docker/"/>
    
      <category term="jenkins" scheme="http://blog.hully.fun/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Koa2 + Mongoose + Log4js 持久化日志</title>
    <link href="http://blog.hully.fun/Koa2+MongoDB+Log4js%20%E6%8C%81%E4%B9%85%E5%8C%96%E6%97%A5%E5%BF%97.html"/>
    <id>http://blog.hully.fun/Koa2+MongoDB+Log4js 持久化日志.html</id>
    <published>2018-01-25T02:28:19.000Z</published>
    <updated>2018-12-17T03:47:45.189Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --><p><img src="http://blog-img.muxiao520.com/koa2+mongoose+Log4js.jpg" alt="logo"><br>&emsp;之前做的项目是采用 Express 框架进行搭建的，其中的日志管理采用了 winston + Postgresql + sequelize的形式, 最近倒弄 Koa2 框架，于是就想着尝试采用另一种方式进行访问日志的管理，就想到了 log4js。关于 log4js 的介绍在这里就不多叙述了，想了解请点击&emsp; <a href="https://www.npmjs.com/package/log4js" target="_blank" rel="noopener">log4js详细介绍</a></p><p>&emsp;说到数据持久化，最普遍的无非就两种方式:</p><ul><li>文件存储</li><li>数据库存储</li></ul><p>&emsp;本文将以log4js为主线，分别对这两种形式进行实现。</p><h4 id="持久化至文件"><a href="#持久化至文件" class="headerlink" title="持久化至文件"></a>持久化至文件</h4><p>&emsp;log4js 输入日志到文件有两种形式:</p><ul><li>file 输出到文件, 指定单一文件名称, 例如: default.log</li><li>dateFile 输出到文件，文件可以按日期模式滚动，例如: default-2017-02-03.log</li></ul><p>直接上代码:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// log4js.js</span><br><span class="line">const log4js = require(&apos;log4js&apos;)</span><br><span class="line">log4js.configure(&#123;</span><br><span class="line">    appenders: &#123;</span><br><span class="line">        error: &#123;</span><br><span class="line">            type: &apos;file&apos;,           //日志类型</span><br><span class="line">            category: &apos;errLogger&apos;,    //日志名称</span><br><span class="line">            filename: __dirname + &apos;/../logs/error.log/&apos;, //日志输出位置，当目录文件或文件夹不存在时自动创建</span><br><span class="line">            maxLogSize: 104800, // 文件最大存储空间</span><br><span class="line">            backups: 100  //当文件内容超过文件存储空间时，备份文件的数量</span><br><span class="line">        &#125;,</span><br><span class="line">        response: &#123;</span><br><span class="line">            type: &apos;dateFile&apos;,</span><br><span class="line">            category: &apos;resLogger&apos;,</span><br><span class="line">            filename: __dirname + &apos;/../logs/responses/&apos;,</span><br><span class="line">            pattern: &apos;yyyy-MM-dd.log&apos;, //日志输出模式</span><br><span class="line">            alwaysIncludePattern: true,</span><br><span class="line">            maxLogSize: 104800,</span><br><span class="line">            backups: 100</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    categories: &#123;</span><br><span class="line">        error: &#123;appenders: [&apos;error&apos;], level: &apos;error&apos;&#125;,</span><br><span class="line">        response: &#123;appenders: [&apos;response&apos;], level: &apos;info&apos;&#125;,</span><br><span class="line">        default: &#123; appenders: [&apos;response&apos;], level: &apos;info&apos;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    replaceConsole: true</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p></p><p>日志配置文件我们已经完成，在这里定义了两种形式的日志，分别是 errLogger 错误日志, resLogger 响应日志。<br>接下来我们将这两种日志进行自定义格式化输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// log4js.js</span><br><span class="line">const &#123;formatError, formatRes&#125; = require(&apos;./formatLog&apos;)</span><br><span class="line">let logger = &#123;&#125;</span><br><span class="line"></span><br><span class="line">let errorLogger = log4js.getLogger(&apos;error&apos;)</span><br><span class="line">let resLogger = log4js.getLogger(&apos;response&apos;)</span><br><span class="line"></span><br><span class="line">// 封装错误日志</span><br><span class="line">logger.errLogger = (ctx, error, resTime) =&gt; &#123;</span><br><span class="line">    if(ctx &amp;&amp; error) &#123;</span><br><span class="line">        errorLogger.error(formatError(ctx, error, resTime))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 封装响应日志</span><br><span class="line">logger.resLogger = (ctx, resTime) =&gt; &#123;</span><br><span class="line">    if(ctx) &#123;</span><br><span class="line">        resLogger.info(formatRes(ctx, resTime))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// formatLog.js</span><br><span class="line">let formatError = (ctx, err,costTime) =&gt; &#123;</span><br><span class="line">    let method = ctx.method</span><br><span class="line">    let url = ctx.url</span><br><span class="line">    let body = ctx.request.body</span><br><span class="line">    let userAgent = ctx.header.userAgent</span><br><span class="line">    return &#123;method, url, body, costTime, err&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let formatRes = (ctx,costTime) =&gt; &#123;</span><br><span class="line">    let method = ctx.method</span><br><span class="line">    let url = ctx.url</span><br><span class="line">    let body = ctx.request.body</span><br><span class="line">    let response = ctx.response</span><br><span class="line">    return &#123;method, url, body, costTime, response&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;formatError, formatRes&#125;</span><br></pre></td></tr></table></figure><p>在我们的应用中使用我们自定义的日志模型<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//app.js</span><br><span class="line">const log4js = require(&apos;./utils/log4js&apos;)</span><br><span class="line"></span><br><span class="line">// logger</span><br><span class="line">app.use(async(ctx, next) =&gt; &#123;</span><br><span class="line">    const start = new Date()</span><br><span class="line">    await next()</span><br><span class="line">    const ms = new Date() - start</span><br><span class="line">    log4js.resLogger(ctx, ms)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(&apos;error&apos;, (err, ctx) =&gt; &#123;</span><br><span class="line">    log4js.errLogger(ctx, err)</span><br><span class="line">    console.error(&apos;server error&apos;, err, ctx)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>此时我们的访问信息都已被输出到了项目 logs 文件夹下面。</p><h4 id="持久化到-MongoDB"><a href="#持久化到-MongoDB" class="headerlink" title="持久化到 MongoDB"></a>持久化到 MongoDB</h4><p>我们采用 Mongoose 驱动进行与 MongoDB 数据库进行交互。关于 Mongoose 的使用请查看 <a href="http://www.nodeclass.com/api/mongoose.html" target="_blank" rel="noopener">Mongoose使用详情</a></p><p>首先我们先定义一个存放日志的数据模型 Log，如下:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//log.js</span><br><span class="line">let log = new Schema(&#123;</span><br><span class="line">    level: &#123;type: String&#125;,</span><br><span class="line">    message: &#123;type: String&#125;,</span><br><span class="line">    info: &#123;</span><br><span class="line">        method: String,</span><br><span class="line">        url: String,</span><br><span class="line">        costTime: Number,</span><br><span class="line">        body: String,</span><br><span class="line">        response: &#123;</span><br><span class="line">            status: Number,</span><br><span class="line">            message: String,</span><br><span class="line">            header: String,</span><br><span class="line">            body: String</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    versionKey: false</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">module.exports = mongoose.model(&apos;logs&apos;, log)</span><br></pre></td></tr></table></figure><p></p><p>日志内容存储到数据库中，实现如下log2db.js<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//log2db.js</span><br><span class="line">const &#123;Log&#125; = require(&apos;../models&apos;)</span><br><span class="line"></span><br><span class="line">let log2db = (msg, level, info) =&gt; &#123;</span><br><span class="line">    let log = &#123;</span><br><span class="line">        level: level || &apos;info&apos;,</span><br><span class="line">        message: msg,</span><br><span class="line">        info: &#123;</span><br><span class="line">            method: info.method,</span><br><span class="line">            url: info.url,</span><br><span class="line">            costTime: info.costTime,</span><br><span class="line">            body: JSON.stringify(info.body),</span><br><span class="line">            response: &#123;</span><br><span class="line">                status: info.response.status,</span><br><span class="line">                message: info.response.message,</span><br><span class="line">                header: JSON.stringify(info.response.header),</span><br><span class="line">                body: JSON.stringify(info.response.body)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Log.create(log, (err, res) =&gt; &#123;</span><br><span class="line">        if(err) &#123;console.log(err)&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = log2db</span><br></pre></td></tr></table></figure><p></p><p>修改我们上边封装的两种日志类型，添加 log2db 如下:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 封装错误日志</span><br><span class="line">logger.errLogger = (ctx, error, resTime) =&gt; &#123;</span><br><span class="line">    if(ctx &amp;&amp; error) &#123;</span><br><span class="line">        log2db(&apos;ErrorRequest&apos;, &apos;error&apos;, formatError(ctx, error, resTime))</span><br><span class="line">        errorLogger.error(formatError(ctx, error, resTime))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 封装相应日志</span><br><span class="line">logger.resLogger = (ctx, resTime) =&gt; &#123;</span><br><span class="line">    if(ctx) &#123;</span><br><span class="line">        log2db(&apos;RequestInfo&apos;, &apos;info&apos;, formatRes(ctx, resTime))</span><br><span class="line">        resLogger.info(formatRes(ctx, resTime))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>OK, 我们重启服务器，进行访问，然后通过 RoboMongo 进行查看我们的 Log 集合，就会发现我们的访问信息都已经记录了下来。</p><p><img src="http://blog-img.muxiao520.com/koa-mongo-logs.png" alt="koa2-mongo-logs"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;http://blog-img.muxiao520.com/koa2+mongoose+Log4js.jpg&quot; alt=&quot;l
      
    
    </summary>
    
      <category term="Nodejs" scheme="http://blog.hully.fun/categories/Nodejs/"/>
    
      <category term="Koa2" scheme="http://blog.hully.fun/categories/Nodejs/Koa2/"/>
    
    
      <category term="Node" scheme="http://blog.hully.fun/tags/Node/"/>
    
      <category term="Koa2" scheme="http://blog.hully.fun/tags/Koa2/"/>
    
      <category term="Mongoose" scheme="http://blog.hully.fun/tags/Mongoose/"/>
    
      <category term="log4js" scheme="http://blog.hully.fun/tags/log4js/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 博客添加百度sitemap以及进行SEO优化</title>
    <link href="http://blog.hully.fun/Hexo%20%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E7%99%BE%E5%BA%A6sitemap%E4%BB%A5%E5%8F%8A%E8%BF%9B%E8%A1%8CSEO%E4%BC%98%E5%8C%96.html"/>
    <id>http://blog.hully.fun/Hexo 博客添加百度sitemap以及进行SEO优化.html</id>
    <published>2018-01-19T07:43:55.000Z</published>
    <updated>2019-07-20T03:42:22.342Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --><blockquote><p>在这个搜索引擎至上的年代，更好的被搜索引擎收录成为必不可少的一步。</p></blockquote><h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><p>个人搭建的博客没有基于任何知名的平台，那么在搜索引擎被收录的可能就微乎其微，那么如何提高被搜索到的几率呢？</p><p>这里就会牵扯到网站的SEO方案，我对这个不是很熟悉，就不在这里大放厥词了。搭建自己的个人博客的时候，无意之中找到一篇介绍添加百度站点收录的文章。自己跟着这篇文章去设置百度，中间也遇到了一些小问题，但是最后也都解决掉了。所以在这里做一个总结。</p><h3 id="二、生成-sitemap-文件"><a href="#二、生成-sitemap-文件" class="headerlink" title="二、生成 sitemap 文件"></a>二、生成 sitemap 文件</h3><p>需要先安装两个 hexo 插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-generator-sitemap --save</span><br><span class="line">cnpm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>一个是传统的 sitemap，一个是百度专有的 sitemap。多多益善。<br>修改_config.yml 文件, 添加如下信息<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br></pre></td></tr></table></figure><p></p><p>安装完这两个插件，再重启 hexo，在本地访问 <a href="http://127.0.0.1:4000/sitemap.xml" target="_blank" rel="noopener">http://127.0.0.1:4000/sitemap.xml</a> 和 <a href="http://127.0.0.1:4000/baidusitemap.xml" target="_blank" rel="noopener">http://127.0.0.1:4000/baidusitemap.xml</a> 就能正确的展示出两个sitemap 文件了。</p><h3 id="三、注册百度站长平台"><a href="#三、注册百度站长平台" class="headerlink" title="三、注册百度站长平台"></a>三、注册百度站长平台</h3><p><a href="https://ziyuan.baidu.com" target="_blank" rel="noopener">百度搜索资源平台</a></p><h3 id="四、添加个人网站"><a href="#四、添加个人网站" class="headerlink" title="四、添加个人网站"></a>四、添加个人网站</h3><p>百度搜索资源平台-&gt;用户中心-&gt;站点管理-&gt;添加网站、添加需要管理的网站地址，第二步的验证有三种方式：文件、html标签、cname。我这里采用的是 html 标签的形式，在 blog/themes/pure/layout/_common/head.ejs 中添加如下代码:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;baidu-site-verification&quot; content=&quot;gfdgfdgfdsg&quot; /&gt;</span><br></pre></td></tr></table></figure><p></p><p>添加完相应的标签之后，上传到自己的博客之中，多刷新几次，百度站点那边就会通过了。</p><h3 id="五、提交-sitemap-文件"><a href="#五、提交-sitemap-文件" class="headerlink" title="五、提交 sitemap 文件"></a>五、提交 sitemap 文件</h3><p>转到链接提交处，选择自己的站点网址。找到自动提交，选择sitemap。按照提示的格式添加自己的sitemap文件,<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">blog.hully.fun/sitemap.xml</span><br><span class="line">blog.hully.fun/baidusitemap.xml</span><br></pre></td></tr></table></figure><p></p><p>接下来要做的就是等待了，过上一两天就会在这里看到提取的 url 数量了</p><blockquote><p>难的不是做完一件事，难的是做好一件事</p></blockquote><h3 id="六、SEO是什么"><a href="#六、SEO是什么" class="headerlink" title="六、SEO是什么"></a>六、SEO是什么</h3><p>百度百科对”seo”的定义是：SEO（Search Engine Optimization），汉译为搜索引擎优化。搜索引擎优化是一种利用搜索引擎的搜索规则来提高目的网站在有关搜索引擎内的排名的方式。SEO目的理解是：为网站提供生态式的自我营销解决方案，让网站在行业内占据领先地位，从而获得品牌收益。SEO包含站外SEO和站内SEO两方面。因此每个人都有一个标准去衡量这个新名词，确实这个新东西让我们在互联网查询自己的东西很方便，只需要你查询自己的关键词或者你查询的名词都可以很快地的出现你所需要的文章或者图片、视频乃至自己喜欢的宝贝。</p><p>除开站外SEO，自己能做的有两方面</p><ul><li>针对个人网站的页面排版进行SEO的优化</li><li>针对搜索引擎进行主动的优化</li></ul><h3 id="七、针对百度搜索引擎的优化"><a href="#七、针对百度搜索引擎的优化" class="headerlink" title="七、针对百度搜索引擎的优化"></a>七、针对百度搜索引擎的优化</h3><p>生在我大天朝，百度毫无疑问是搜索大头了。尽管最近是有百度各种XXX的消息，百度也确实是做的很不对，但也不得不承认，国内其他搜索引擎还真比不上百度。所以就还是老老实实的去迎合百度搜索引擎吧。</p><ol><li><p>添加百度 sitemap</p></li><li><p>添加蜘蛛协议 robots<br>新建robots.txt文件，添加以下文件内容，把robots.txt放在hexo站点的source文件下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># hexo robots.txt</span><br><span class="line">User-agent: * Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line"></span><br><span class="line">Sitemap: http://blog.hully.fun/sitemap.xml</span><br><span class="line">Sitemap: http://blog.hully.fun/baidusitemap.xml</span><br></pre></td></tr></table></figure></li></ol><p>然后去百度站长平台检测robots文件看看有没有生效。</p><h3 id="八、网站结构自身优化"><a href="#八、网站结构自身优化" class="headerlink" title="八、网站结构自身优化"></a>八、网站结构自身优化</h3><ol><li><p>keywords 和 description</p><p>在\scaffolds\post.md中添加如下代码，用于生成的文章中添加关键字和描述。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keywords: #文章关键词，多个关键词用英文逗号隔开</span><br><span class="line">description: #文章描述，便于搜索引擎用关键词检索</span><br></pre></td></tr></table></figure></li><li><p>修改文章链接</p></li></ol><p>HEXO默认的文章链接形式为domain/year/month/day/postname，默认就是一个四级url，并且可能造成url过长，对搜索引擎是十分不友好的，我们可以改成domain/postname 的形式。编辑站点_config.yml文件，修改其中的permalink字段改为permalink: :title.html即可。</p><h4 id="摘自"><a href="#摘自" class="headerlink" title="摘自:"></a>摘自:</h4><p><a href="https://www.jianshu.com/p/ab44b916a8b6" target="_blank" rel="noopener">Hexo 博客添加百度sitemap</a></p><p><a href="https://www.jianshu.com/p/0d54a590b81a" target="_blank" rel="noopener">Hexo NexT 主题SEO优化指南</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --&gt;&lt;blockquote&gt;&lt;p&gt;在这个搜索引擎至上的年代，更好的被搜索引擎收录成为必不可少的一步。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&quot;一、
      
    
    </summary>
    
      <category term="Hexo" scheme="http://blog.hully.fun/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://blog.hully.fun/tags/Hexo/"/>
    
      <category term="sitemap" scheme="http://blog.hully.fun/tags/sitemap/"/>
    
      <category term="SEO" scheme="http://blog.hully.fun/tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>云服务之阿里云--服务器搭建：Redis 3.2.9 安装</title>
    <link href="http://blog.hully.fun/%E4%BA%91%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%98%BF%E9%87%8C%E4%BA%91--%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%EF%BC%9ARedis%203.2.9%20%E5%AE%89%E8%A3%85.html"/>
    <id>http://blog.hully.fun/云服务之阿里云--服务器搭建：Redis 3.2.9 安装.html</id>
    <published>2017-12-21T16:00:00.000Z</published>
    <updated>2018-12-17T03:47:45.190Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/software</span><br><span class="line">wget http://download.redis.io/releases/redis-3.2.9.tar.gz</span><br><span class="line">tar xzf redis-3.2.9.tar.gz</span><br><span class="line">cd redis-3.2.9</span><br><span class="line">make</span><br></pre></td></tr></table></figure><h4 id="设置服务"><a href="#设置服务" class="headerlink" title="设置服务"></a>设置服务</h4><ul><li><p>首先将 utils/redis_init_script 文件复制到/etc/init.d 下，同时易名为 redis,执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /opt/software/redis-3.2.9/utils/redis_init_script  /etc/rc.d/init.d/redis</span><br></pre></td></tr></table></figure></li><li><p>创建/usr/redis 目录， mkdir /usr/redis</p><p>将 src/redis-server src/redis-cli redis.conf 复制到该目录下</p></li><li><p>vi /etc/rc.d/init.d/redis<br><img src="http://blog-img.muxiao520.com/install%20redis.png" alt="install redis"></p><p>如图修改文中 1, 2, 3 处:</p></li></ul><table><thead><tr><th>标记处</th><th>操作</th></tr></thead><tbody><tr><td>1</td><td>将目录配置为我们刚才复制出来的目录</td></tr><tr><td>2</td><td>将 redis 进行服务保存到 redis.pid</td></tr><tr><td>3</td><td>加上&amp;符号使其在后台运行</td></tr></tbody></table><ul><li><p>将 reids 配置服务复制到/etc/redis</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/redis</span><br><span class="line">cp  /usr/redis/redis.conf /etc/redis</span><br></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service redis start</span><br></pre></td></tr></table></figure></li><li><p>进行测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/redis</span><br><span class="line">./redis-cli</span><br><span class="line">redis&gt; set foo bar</span><br><span class="line">OK</span><br><span class="line">redis&gt; get foo</span><br><span class="line">&quot;bar&quot;</span><br></pre></td></tr></table></figure></li></ul><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li>select index 切换 db</li><li>keys * 查看当前数据库里的 key</li><li>del key 删除 key</li></ul><p>一切 OK，愉快的使用吧</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;figure 
      
    
    </summary>
    
      <category term="云服务" scheme="http://blog.hully.fun/categories/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="云服务" scheme="http://blog.hully.fun/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="服务器搭建" scheme="http://blog.hully.fun/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>云服务之阿里云--服务器搭建：Postgre 9.5 安装</title>
    <link href="http://blog.hully.fun/%E4%BA%91%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%98%BF%E9%87%8C%E4%BA%91--%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%EF%BC%9APostgre%209.5%20%E5%AE%89%E8%A3%85.html"/>
    <id>http://blog.hully.fun/云服务之阿里云--服务器搭建：Postgre 9.5 安装.html</id>
    <published>2017-12-20T16:00:00.000Z</published>
    <updated>2018-12-17T03:47:45.260Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --><p>CentOS Yum 工具安装，简单方便，查看了一下官方源版本，显示目前最新版本是9.2.15,需要更新源，文档中有专门的rpm包列表，<a href="https://yum.postgresql.org/repopackages.php" target="_blank" rel="noopener">RPM LIST</a>。</p><h5 id="添加RPM"><a href="#添加RPM" class="headerlink" title="添加RPM"></a>添加RPM</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install https://download.postgresql.org/pub/repos/yum/9.5/redhat/rhel-7-x86_64/pgdg-centos95-9.5-2.noarch.rpm</span><br></pre></td></tr></table></figure><p><img src="http://blog-img.muxiao520.com/install%20postgre1.png" alt="install postgre 1"><br><img src="http://blog-img.muxiao520.com/install%20postgre2.png" alt="install postgre 2"></p><h4 id="安装PostgreSQL-9-5"><a href="#安装PostgreSQL-9-5" class="headerlink" title="安装PostgreSQL 9.5"></a>安装PostgreSQL 9.5</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install postgresql95-server postgresql95-contrib</span><br></pre></td></tr></table></figure><p><img src="http://blog-img.muxiao520.com/install%20postgre3.png" alt="install postgre 3"></p><h4 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/pgsql-9.5/bin/postgresql95-setup initdb</span><br></pre></td></tr></table></figure><p><img src="http://blog-img.muxiao520.com/install%20postgre4.png" alt="install postgre 4"></p><h4 id="设置开机自启动"><a href="#设置开机自启动" class="headerlink" title="设置开机自启动"></a>设置开机自启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable postgresql-9.5.service</span><br></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start postgresql-9.5.service</span><br></pre></td></tr></table></figure><p><img src="http://blog-img.muxiao520.com/install%20postgre5.png" alt="install postgre 5"><br>自此，PostgreSQL 9.5 安装完成，此过程中注意安装权限，我在安装过程中一直使用的是root用户进行的安装。接下来，进行一下简单的配置。PostgreSQL 安装完成后，会建立一下‘postgres’用户，用于执行PostgreSQL，数据库中也会建立一个’postgres’用户，默认密码为自动生成，需要在系统中改一下。</p><h4 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">su - postgres           # 切换用户，执行后提示符会变为 &apos;-bash-4.2$&apos;  </span><br><span class="line">psql                    # 登录数据库，执行后提示符变为 &apos;postgres=#&apos;  </span><br><span class="line">select version()        # 获取数据库的版本信息  </span><br><span class="line"># 通过\l命令可以查看目前有哪些数据库  </span><br><span class="line">ALTER USER postgres WITH PASSWORD &apos;abc123&apos;  #设置postgres用户密码  </span><br><span class="line">\q                      # 退出数据库</span><br></pre></td></tr></table></figure><p><img src="http://blog-img.muxiao520.com/install%20postgre6.png" alt="install postgre 6"></p><h4 id="开启远程访问"><a href="#开启远程访问" class="headerlink" title="开启远程访问"></a>开启远程访问</h4><p>vi /var/lib/pgsql/9.5/data/postgresql.conf<br>修改#listen_addresses = ‘localhost’ 为 listen_addresses=’<em>‘<br>当然，此处‘</em>’也可以改为任何你想开放的服务器IP<br><img src="http://blog-img.muxiao520.com/install%20postgre7.png" alt="install postgre 7"></p><h4 id="信任远程连接"><a href="#信任远程连接" class="headerlink" title="信任远程连接"></a>信任远程连接</h4><p>vi /var/lib/pgsql/9.5/data/pg_hba.conf<br>修改如下内容，信任指定服务器连接<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># IPv4 local connections:</span><br><span class="line">host    all            all      127.0.0.1/32      trust</span><br><span class="line">host    all            all      10.211.55.6/24（需要连接的服务器IP）  MD5</span><br></pre></td></tr></table></figure><p></p><p><img src="http://blog-img.muxiao520.com/install%20postgre8.png" alt="install postgre 8"></p><h4 id="打开防火墙"><a href="#打开防火墙" class="headerlink" title="打开防火墙"></a>打开防火墙</h4><p>CentOS 防火墙中内置了PostgreSQL服务，配置文件位置在/usr/lib/firewalld/services/postgresql.xml，我们只需以服务方式将PostgreSQL服务开放即可。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-service=postgresql --permanent   #开放postgresql服务</span><br><span class="line">firewall-cmd --reload  #重载防火墙</span><br></pre></td></tr></table></figure><p></p><p><img src="http://blog-img.muxiao520.com/install%20postgre9.png" alt="install postgre 9"></p><p>如果出现上图中的错误，那是因为我们的防火墙没有打开，按以下操作打开:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld    # 查看防火墙的状态，发现当前是dead状态，即防火墙未开启。显示running即已开启了</span><br><span class="line">systemctl start firewalld     # 开启防火墙，没有任何提示即开启成功</span><br><span class="line">systemctl stop firewalld      # 关闭防火墙</span><br></pre></td></tr></table></figure><p></p><p><img src="http://blog-img.muxiao520.com/install%20postgre10.png" alt="install postgre 10"><br>然后添加 postgresql 服务，提示success，表示设置成功<br><img src="http://blog-img.muxiao520.com/install%20postgre11.png" alt="install postgre 11"></p><p>添加端口支持，提示success，表示设置成功<br><img src="http://blog-img.muxiao520.com/install%20postgre12.png" alt="install postgre 12"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewalld-cmd --reload       # 重载防火墙</span><br><span class="line">firewall-cmd --list-all      # 查看防火墙列表，发现我们的 postgresql 已经开启了</span><br></pre></td></tr></table></figure><p><img src="http://blog-img.muxiao520.com/install%20postgre13.png" alt="install postgre 13"></p><h4 id="重启PostgreSQL数据服务"><a href="#重启PostgreSQL数据服务" class="headerlink" title="重启PostgreSQL数据服务"></a>重启PostgreSQL数据服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart postgresql-9.5.service</span><br></pre></td></tr></table></figure><h4 id="使用-Navicat-连接postgresql数据库"><a href="#使用-Navicat-连接postgresql数据库" class="headerlink" title="使用 Navicat 连接postgresql数据库"></a>使用 Navicat 连接postgresql数据库</h4><p><img src="http://blog-img.muxiao520.com/install%20postgre14.png" alt="install postgre 14"><br><img src="http://blog-img.muxiao520.com/install%20postgre15.png" alt="install postgre 15"><br><img src="http://blog-img.muxiao520.com/install%20postgre16.png" alt="install postgre 16"><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;postgres&quot;: &#123;</span><br><span class="line">    &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;port&quot;: 5432,</span><br><span class="line">    &quot;user&quot;: &quot;postgres&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;hahahaha&quot;,</span><br><span class="line">    &quot;database&quot;: &quot;hehehehe&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>连接成功，接下来我们就可以通过我们的 navicat 实现本地连接管理我们的云数据库了</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;CentOS Yum 工具安装，简单方便，查看了一下官方源版本，显示目前最新版本是9.2.15,需要更新源，文档中有专门的rpm包列表，&lt;a h
      
    
    </summary>
    
      <category term="云服务" scheme="http://blog.hully.fun/categories/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="云服务" scheme="http://blog.hully.fun/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="服务器搭建" scheme="http://blog.hully.fun/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>云服务之腾讯云--服务器搭建--第三章：Mysql and Nginx 安装与配置</title>
    <link href="http://blog.hully.fun/%E4%BA%91%E6%9C%8D%E5%8A%A1%E4%B9%8B%E8%85%BE%E8%AE%AF%E4%BA%91--%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA--%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9AMysql%20and%20Nginx%20%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE.html"/>
    <id>http://blog.hully.fun/云服务之腾讯云--服务器搭建--第三章：Mysql and Nginx 安装与配置.html</id>
    <published>2017-12-18T16:00:00.000Z</published>
    <updated>2018-12-17T03:47:45.189Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --><p>&emsp;&emsp;上回书说道采用 node 搭建了一个简易的服务器，本章我们将要介绍如何在云服务器上安装 mysql 以及 nginx, 如有不当之处，还望指正，谢谢。</p><h3 id="MySQL-的安装与配置"><a href="#MySQL-的安装与配置" class="headerlink" title="MySQL 的安装与配置"></a>MySQL 的安装与配置</h3><p>&emsp;&emsp;mysql 使我们最常用到的关系型数据库了，其基本信息在这里也不絮叨了，直入正题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum isntall wget</span><br><span class="line">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure><p>安装成功之后重启 mysql 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><p>初次安装 mysql 时 root 账户是没有密码的, 设置密码的方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot</span><br><span class="line">mysql&gt; set password for `root`@`localhost` = password(&apos;mypassword&apos;);</span><br><span class="line">mysql&gt; exit;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;接下来我们创建一个属于我们项目的数据库，并连接数据库<br><img src="http://blog-img.muxiao520.com/mysql-nginx-1.png" alt="one"></p><p><img src="http://blog-img.muxiao520.com/mysql-nginx-2.png" alt="two"></p><p>&emsp;&emsp;接下来我们要想在自己的机器上通过第三方数据库可视化工具进行连接，需要我们将我们的数据库远程访问权限打开</p><h4 id="改表法"><a href="#改表法" class="headerlink" title="改表法"></a>改表法</h4><p>我们新安装的数据库一般情况下是不允许从远程登录的，只能在localhost。这个时候只要在localhost的那台电脑，登入mysql后，更改 “mysql” 数据库里的 “user” 表里的 “host” 项，将”localhost”改为”%”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p </span><br><span class="line">mysql&gt; use mysql; </span><br><span class="line"># %表示所有ip都可以进行远程访问</span><br><span class="line">mysql&gt; update user set host = &apos;%&apos; where user = &apos;root&apos;;  </span><br><span class="line"># 或者直接添加一条语句   　　</span><br><span class="line">mysql&gt; insert into user (host,user,password) values(&apos;192.168.11.110&apos;,&apos;root&apos;,password(&apos;123456&apos;));　　</span><br><span class="line"># 查看一下修改结果</span><br><span class="line">mysql&gt; select host, user from user;    </span><br><span class="line"># 将修改的信息推送到内存中或重启服务器</span><br><span class="line">mysql&gt; FLUSH PRIVILEGES</span><br></pre></td></tr></table></figure><h4 id="授权法"><a href="#授权法" class="headerlink" title="授权法"></a>授权法</h4><p>在安装mysql的机器上运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 进入到mysql服务器</span><br><span class="line">mysql -h localhost -u root      </span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos;WITH GRANT OPTION</span><br><span class="line"># 赋予任何主机访问数据的权限</span><br><span class="line">比如我们想用 myuser使用mypassword从任何主机连接到mysql服务器的话。</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;myuser&apos;@&apos;%&apos;IDENTIFIED BY &apos;mypassword&apos; WITH GRANT OPTION; </span><br><span class="line"># 如果想允许用户myuser从ip为192.168.11.110的主机连接到mysql服务器，并使用mypassword作为密码</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;myuser&apos;@&apos;192.168.11.110&apos;IDENTIFIED BY &apos;mypassword&apos; WITH GRANT OPTION;</span><br><span class="line"># 将修改的信息推送到内存中或重启服务器</span><br><span class="line">mysql&gt;FLUSH PRIVILEGES   </span><br><span class="line">mysql&gt;EXIT</span><br></pre></td></tr></table></figure><p>接下来我们在本地电脑上采用 Navicat 连接我们云服务器上的数据库</p><p><img src="http://blog-img.muxiao520.com/mysql-nginx-3.png" alt="three"></p><h3 id="Nginx-的安装与配置"><a href="#Nginx-的安装与配置" class="headerlink" title="Nginx 的安装与配置"></a>Nginx 的安装与配置</h3><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><p>参考： <a href="http://blog.csdn.net/ul646691993/article/details/52104082" target="_blank" rel="noopener">http://blog.csdn.net/ul646691993/article/details/52104082</a> 采用 yum install 安装，依赖都包含了</p><p>检查是否安装过 nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ find -name nginx</span><br><span class="line"># 如果已经安装过 nginx,就先卸载</span><br><span class="line">$ yum remove nginx</span><br><span class="line"># 查看本机 nginx 的地址</span><br><span class="line">nginx -t</span><br></pre></td></tr></table></figure><p>接下来我们进行安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cd /opt</span><br><span class="line"># 去官网下载最新版的 nginx</span><br><span class="line">$ wget http://nginx.org/download/nginx-1.12.0.tar.gz  </span><br><span class="line"># 解压 nginx 压缩包</span><br><span class="line">$ tar -zxvf  nginx-1.12.0.tar.gz  </span><br><span class="line">$ cd  nginx-1.12.0</span><br><span class="line"># 接下来安装，使用--prefix参数指定nginx安装的目录,make、make install安装</span><br><span class="line">$ ./configure  #(--preifx=/usr/local/nginx)#     </span><br><span class="line"># 默认安装在/usr/local/nginx</span><br></pre></td></tr></table></figure><p>此时会报错<br><img src="http://blog-img.muxiao520.com/mysql-nginx-4.png" alt="err"></p><p>这是因为我们没有安装其依赖包，接下来我们回过头来进行安装其依赖环境<br>首先由于nginx的一些模块依赖一些lib库，所以在安装nginx之前，必须先安装这些lib库，这些依赖库主要有g++、gcc、openssl-devel、pcre-devel和zlib-devel 所以执行如下命令安装</p><h5 id="安装方式一-安装包安装-成功"><a href="#安装方式一-安装包安装-成功" class="headerlink" title="安装方式一 安装包安装 成功"></a>安装方式一 安装包安装 成功</h5><p>$ yum install gcc-c++ 这个不需要安装包，直接使用yum命令就可以</p><h6 id="安装PCRE库"><a href="#安装PCRE库" class="headerlink" title="安装PCRE库"></a>安装PCRE库</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/</span><br><span class="line">$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.40.tar.gz</span><br><span class="line">$ tar -zxvf pcre-8.40.tar.gz</span><br><span class="line">$ cd pcre-8.40</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><h6 id="安装zlib库"><a href="#安装zlib库" class="headerlink" title="安装zlib库"></a>安装zlib库</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/ </span><br><span class="line">$ wget http://zlib.net/zlib-1.2.8.tar.gz</span><br><span class="line">$ tar -zxvf zlib-1.2.8.tar.gz</span><br><span class="line">$ cd zlib-1.2.8</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><h6 id="安装ssl"><a href="#安装ssl" class="headerlink" title="安装ssl"></a>安装ssl</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/</span><br><span class="line">$ wget http://www.openssl.org/source/openssl-1.0.1j.tar.gz</span><br><span class="line">$ tar -zxvf openssl-1.0.1j.tar.gz</span><br><span class="line">$ ./config</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><p>完成以上安装之后，进行nginx的安装<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://nginx.org/download/nginx-1.12.0.tar.gz</span><br><span class="line">$ tar -zxvf nginx-1.12.0.tar.gz</span><br><span class="line">$ cd nginx-1.12.0  </span><br><span class="line">$ ./configure </span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><p></p><p>安装完成后进行启动nginx:<br>$ /usr/local/nginx/sbin/nginx</p><p>检查是否启动成功：打开浏览器访问此机器的 IP，如果浏览器出现 Welcome to nginx! 则表示 Nginx 已经安装并运行成功。<br>部分命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 重启</span><br><span class="line">$ /usr/local/nginx/sbin/nginx –s reload</span><br><span class="line"># 停止</span><br><span class="line">$ /usr/local/nginx/sbin/nginx –s stop</span><br><span class="line"># 测试配置文件是否正常</span><br><span class="line">$ /usr/local/nginx/sbin/nginx –t</span><br><span class="line"># 强制关闭</span><br><span class="line">$ pkill nginx</span><br></pre></td></tr></table></figure><h5 id="安装方式二-没成功，还请各位指点，谢谢"><a href="#安装方式二-没成功，还请各位指点，谢谢" class="headerlink" title="安装方式二 没成功，还请各位指点，谢谢"></a>安装方式二 没成功，还请各位指点，谢谢</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$   yum install gcc-c++</span><br><span class="line">$   yum install pcre pcre-devel  </span><br><span class="line">$   yum install zlib zlib-devel </span><br><span class="line">$   yum install openssl openssl--devel</span><br></pre></td></tr></table></figure><p>zlib 和 pcre安装时会报错，我们来看一看错误提示</p><p><img src="http://blog-img.muxiao520.com/mysql-nginx-5.png" alt="err"></p><p>在这里我们看一下第三个提示，我们机器已经包含有 zlib 的环境了，我们回过头来来尝试继续安装 nginx<br>$ cd nginx-1.7.4<br>$ ./configure</p><h4 id="使用nginx进行我们的Node项目反向代理"><a href="#使用nginx进行我们的Node项目反向代理" class="headerlink" title="使用nginx进行我们的Node项目反向代理"></a>使用nginx进行我们的Node项目反向代理</h4><p>创建我们的配置文档 node-tencent.conf<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ cd /usr/local/nginx</span><br><span class="line">$ mkdir myConfig</span><br><span class="line">$ cd myConfig</span><br><span class="line">$ vi node-tencent.conf</span><br><span class="line"></span><br><span class="line">upstream nodejs &#123;</span><br><span class="line">    server 127.0.0.1:3000;</span><br><span class="line">    #server 127.0.0.1:3001;</span><br><span class="line">    keepalive 64;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 172.0.0.1;</span><br><span class="line">    access_log /opt/log/nginx/test.log;</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header Host  $http_host;</span><br><span class="line">        proxy_set_header X-Nginx-Proxy true;</span><br><span class="line">        proxy_set_header Connection &quot;&quot;;</span><br><span class="line">        proxy_pass      http://nodejs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>然后回到 /usr/local/nginx/conf下修改nginx.conf, 在http下加入我们刚才的配置文件<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include       /usr/local/nginx/myConfig/*;</span><br></pre></td></tr></table></figure><p></p><p>重启我们的nginx，使其重新加载配置文件， /usr/local/sbin/nginx -s reload</p><p>在浏览器里直接输出我们的服务器IP地址就可以访问到了</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&amp;emsp;&amp;emsp;上回书说道采用 node 搭建了一个简易的服务器，本章我们将要介绍如何在云服务器上安装 mysql 以及 nginx, 
      
    
    </summary>
    
      <category term="云服务" scheme="http://blog.hully.fun/categories/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="云服务" scheme="http://blog.hully.fun/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="服务器搭建" scheme="http://blog.hully.fun/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>云服务之腾讯云--服务器搭建--第二章：NVM and FileZilla FTP上传</title>
    <link href="http://blog.hully.fun/%E4%BA%91%E6%9C%8D%E5%8A%A1%E4%B9%8B%E8%85%BE%E8%AE%AF%E4%BA%91--%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA--%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9ANVM%20and%20FileZilla%20FTP%E4%B8%8A%E4%BC%A0.html"/>
    <id>http://blog.hully.fun/云服务之腾讯云--服务器搭建--第二章：NVM and FileZilla FTP上传.html</id>
    <published>2017-12-16T16:00:00.000Z</published>
    <updated>2018-12-17T03:47:45.189Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --><p>&emsp;&emsp;书接上文，本章主要囊括 node版本管理 nvm 的安装与使用以及使用 FileZilla 通过 FTP 协议上传文件至云服务器，如有不当，还请指正，谢谢。</p><h4 id="NVM-的安装与配置"><a href="#NVM-的安装与配置" class="headerlink" title="NVM 的安装与配置"></a>NVM 的安装与配置</h4><p>通过 SSH 登录云主机之后我们就可以进行我们的开发环境配置了，首先我们安装一下 NVM(node 版本管理神器)<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</span><br></pre></td></tr></table></figure><p></p><p><img src="http://blog-img.muxiao520.com/nvm-filezilla%20ftp-1.png" alt="one"></p><p>其中的版本我们可以根据我们的开发需要进行选择<br>安装好 NVM 之后需要我们重启一下控制台，这里我是进行退出之后重新登录，<br>登录成功后我们可以输入命令 nvm ls-remote 查看当前所有的 node 版本然后选择合适的版本进行安装，<br>在这里我安装的是 node V7.0.0, 安装完成后输入 node -v 查看当前的 node 版本是否是我们刚才安装的版本</p><p><img src="http://blog-img.muxiao520.com/nvm-filezilla%20ftp-2.png" alt="two"></p><p><img src="http://blog-img.muxiao520.com/nvm-filezilla%20ftp-3.png" alt="three"></p><h4 id="FileZilla-通过-FTP-协议连接云服务"><a href="#FileZilla-通过-FTP-协议连接云服务" class="headerlink" title="FileZilla 通过 FTP 协议连接云服务"></a>FileZilla 通过 FTP 协议连接云服务</h4><p>NVM 安装配置完成后，接下来就是将我们本地的代码进行部署到我们的服务器上，在 MAC 环境下我们使用 FileZilla 进行文件传输，在这里我们使用SFTP 进行连接：</p><p><img src="http://blog-img.muxiao520.com/nvm-filezilla%20ftp-4.png" alt="FOUR"></p><p>连接的时候需要我们进行私钥的配置，就是之前我们下载的云服务的私钥</p><p><img src="http://blog-img.muxiao520.com/nvm-filezilla%20ftp-5.png" alt="FIVE"></p><p><img src="http://blog-img.muxiao520.com/nvm-filezilla%20ftp-6.png" alt="SIX"></p><p>添加完私钥之后回到我们的站点管理器进行服务器连接，成功连接！</p><p><img src="http://blog-img.muxiao520.com/nvm-filezilla%20ftp-7.png" alt="SEVEN"></p><p>连接成功之后就可以传输我们的程序代码了, 这里传输的时候可以先将 node_modules 目录删除，传输完成之后切换到我们的项目目录，进行模块安装 npm install , 安装成功后 npm start 启动我们的项目, 成功启动！</p><p><img src="http://blog-img.muxiao520.com/nvm-filezilla%20ftp-8.png" alt="EIGHT"></p><p>打开浏览器输入 host(云服务外网 IP)：port(服务端口号)进行访问一下吧</p><p><img src="http://blog-img.muxiao520.com/nvm-filezilla%20ftp-9.png" alt="NINE"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&amp;emsp;&amp;emsp;书接上文，本章主要囊括 node版本管理 nvm 的安装与使用以及使用 FileZilla 通过 FTP 协议上传文件至
      
    
    </summary>
    
      <category term="云服务" scheme="http://blog.hully.fun/categories/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="云服务" scheme="http://blog.hully.fun/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="服务器搭建" scheme="http://blog.hully.fun/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>云服务之腾讯云--服务器搭建--第一章：服务器购买 与 SSH 远程连接</title>
    <link href="http://blog.hully.fun/%E4%BA%91%E6%9C%8D%E5%8A%A1%E4%B9%8B%E8%85%BE%E8%AE%AF%E4%BA%91--%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA--%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B4%AD%E4%B9%B0%20%E4%B8%8E%20SSH%20%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5.html"/>
    <id>http://blog.hully.fun/云服务之腾讯云--服务器搭建--第一章：服务器购买 与 SSH 远程连接.html</id>
    <published>2017-12-14T16:00:00.000Z</published>
    <updated>2018-12-17T03:47:45.260Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --><p>很久的东西了，现在拿出来整理一下共享给大家，若有不当之处还望指正。</p><h4 id="注册与购买"><a href="#注册与购买" class="headerlink" title="注册与购买"></a>注册与购买</h4><p>打开腾讯云平台进行注册，完成实名认证，平台会赠送给我们一个月的云服务器</p><p><img src="http://blog-img.muxiao520.com/buyserver-ssh1.png" alt="ONE"></p><p><img src="http://blog-img.muxiao520.com/buyserver-ssh2.png" alt="TWO"></p><p><img src="http://blog-img.muxiao520.com/buyserver-ssh3.png" alt="THREE"></p><p>申请结束后点击主页右上角管理中心就能看到自己的与服务器了。</p><p><img src="http://blog-img.muxiao520.com/buyserver-ssh4.png" alt="FOUR"></p><h4 id="服务器设置与远程连接"><a href="#服务器设置与远程连接" class="headerlink" title="服务器设置与远程连接"></a>服务器设置与远程连接</h4><p>点击云服务器进入到云服务管理平台</p><p><img src="http://blog-img.muxiao520.com/buyserver-ssh5.png" alt="FIVE"></p><p>主机名称，登录密码都可以进行自定义修改，原密码在之前申请主机成功后会发送到我们的个人邮箱中，建议修改。接下来在 SSH 密钥管理中创建密钥并进行绑定云主机</p><p><img src="http://blog-img.muxiao520.com/buyserver-ssh6.png" alt="SIX"></p><p>创建的密钥要在10分钟之内下载下来，建议创建结束后立即下载。在这里我们已经进行下载了，将其放在本地电脑的~/.ssh 文件夹内。<br>通过命令 ssh -i “密钥文件的绝对路径” root(username)@host就可以登录到我们的云主机了</p><p><img src="http://blog-img.muxiao520.com/buyserver-ssh7.png" alt="SEVEN"></p><h4 id="Windows采用-SSH-Secure-Shell连接云服务"><a href="#Windows采用-SSH-Secure-Shell连接云服务" class="headerlink" title="Windows采用 SSH Secure Shell连接云服务"></a>Windows采用 SSH Secure Shell连接云服务</h4><ol><li>打开 ssh secure shell –&gt; Edit-&gt;settings-&gt;Keys</li><li>点击“Generate New” 可选择 rsa dsa两种加密方式，这里我选择了rsa方式加密</li><li>输入生成Key的文件名和注释，打算使用空密码登录则Passphrase中不输入密码</li><li>完成</li><li>选择Export将文件导入到我们本机的一个目录下，如下图我将其放到了E:\tecent.pub</li><li>然后将其上传到云服务器的/root/.ssh目录下</li><li>因为SSH Server是Linux，而SSH Secure Shell Client客户端上Windows，所以密钥需要进行格式转换<br>cd /root/.ssh/<br>ssh-keygen -i -f xxx.pub &gt;&gt; authorized_keys<br>将解析过的文件内容追加到 authorized_keys文件末尾</li><li>修改sshd_config<br>sudo vi /etc/ssh/sshd_config<br>让这几项生效：<br>RSAAuthentication yes<br>PubkeyAuthentication yes<br>AuthorizedKeysFile .ssh/authorized_keys<br>可选择关闭输入pasword认证：<br>PasswordAuthentication no</li><li>重启sshd服务 sudo service ssh restart</li><li>连接即可，自己生成的keys在c:\Users\Administrator\AppData\Roaming\SSH\UserKeys中,<br>然后就可以通过我们的SSH Secure Shell 进行连接了</li></ol><p><img src="http://blog-img.muxiao520.com/buyserver-ssh8.png" alt="EIGHT"></p><p><img src="http://blog-img.muxiao520.com/buyserver-ssh9.png" alt="NINE"></p><p><img src="http://blog-img.muxiao520.com/buyserver-ssh10.png" alt="TEN"></p><p><img src="http://blog-img.muxiao520.com/buyserver-ssh11.png" alt="ONE-ONE"></p><p><img src="http://blog-img.muxiao520.com/buyserver-ssh12.png" alt="ONE-TWO"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;很久的东西了，现在拿出来整理一下共享给大家，若有不当之处还望指正。&lt;/p&gt;&lt;h4 id=&quot;注册与购买&quot;&gt;&lt;a href=&quot;#注册与购买&quot; cla
      
    
    </summary>
    
      <category term="云服务" scheme="http://blog.hully.fun/categories/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="云服务" scheme="http://blog.hully.fun/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="服务器搭建" scheme="http://blog.hully.fun/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Express+Socket.io 实现简易聊天室</title>
    <link href="http://blog.hully.fun/Express+Socket.io%20%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E8%81%8A%E5%A4%A9%E5%AE%A4.html"/>
    <id>http://blog.hully.fun/Express+Socket.io 实现简易聊天室.html</id>
    <published>2017-03-14T16:00:00.000Z</published>
    <updated>2018-12-17T03:47:45.260Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --><p><img src="http://blog-img.muxiao520.com/chatroom-logo.jpg" alt="logo"></p><p>闲暇之余研究了一下 Socket.io，搭建了一个简易版的聊天室，如有不对之处还望指正，先上效果图:<br>首先是登录页面:</p><p><img src="http://blog-img.muxiao520.com/chatroom-login.png" alt="login"></p><p>接下来就是聊天页面:</p><p><img src="http://blog-img.muxiao520.com/chatroom-msg1.png" alt="chatmsg1"><br><img src="http://blog-img.muxiao520.com/chatroom-msg2.png" alt="chatmsg2"></p><p>Socket.IO是Node.js的一个模块，它提供通过WebSocket进行通信的一种简单方式，WebSocket协议很复杂，但是Socket.IO提供了服务器和客户端双方的组件，所以只需要一个模块就可以给应用程序加入对WebSocket的支持，而且还能支持不同的浏览器哦。关于其详细介绍请参考官网<a href="https://socket.io/" target="_blank" rel="noopener">SocketIO 官网</a>，这里呢我们还是直接上代码。</p><p>首先是创建 Socket 服务, 我们的项目启动文件 bin/www，我们就来修改它:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// bin/www</span><br><span class="line">var app = require(&apos;../app&apos;);</span><br><span class="line">var debug = require(&apos;debug&apos;)(&apos;websocket:server&apos;);</span><br><span class="line">var http = require(&apos;http&apos;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Get port from environment and store in Express.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var port = normalizePort(process.env.PORT || &apos;3070&apos;);</span><br><span class="line">app.set(&apos;port&apos;, port);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Create HTTP server.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var server = http.createServer(app);</span><br><span class="line">var io = require(&apos;socket.io&apos;).listen(server);   //创建 socket 服务</span><br><span class="line">io.on(&apos;connection&apos;,function(socket)&#123;            //监听客户端的连接请求</span><br><span class="line">  socket.emit(&apos;connected&apos;,&quot;连接成功&quot;);</span><br><span class="line">  socket.on(&apos;message&apos;,function(msg)&#123;            //监听客户端发送的消息</span><br><span class="line">    console.log(msg);   </span><br><span class="line">    socket.emit(&apos;content&apos;,msg);                 // 向客户端发送反馈消息</span><br><span class="line">    socket.broadcast.emit(&apos;content&apos;,msg);       // 向所有的已连接客户端进行广播消息</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">/**</span><br><span class="line"> * Listen on provided port, on all network interfaces.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">server.listen(port);</span><br><span class="line">server.on(&apos;error&apos;, onError);</span><br><span class="line">server.on(&apos;listening&apos;, onListening);</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p></p><p>在这里我做了一个小的登录控制，也就是 session 的简单使用，具体看下边的路由控制:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//  routes/index.js</span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* GET home page. */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res) &#123;</span><br><span class="line">  res.render(&apos;login&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">router.post(&apos;/login&apos;,function(req,res)&#123;</span><br><span class="line">  var name=req.body.name;</span><br><span class="line">  req.session.name=name;</span><br><span class="line">  res.send(&quot;success&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">router.get(&apos;/index&apos;,function(req,res)&#123;</span><br><span class="line">  if(req.session.name!=null &amp;&amp; req.session.name!=&quot;&quot;)&#123;</span><br><span class="line">    res.render(&apos;index&apos;,&#123;name:req.session.name&#125;);</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    res.redirect(&apos;/&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><p></p><p>然后接下来创建客户端登录页面:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">// views/login.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;登录简化聊天室&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;bookmark&quot;  type=&quot;image/x-icon&quot;  href=&quot;images/chat.ico&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;shortcut icon&quot; href=&quot;images/chat.ico&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;icon&quot; href=&quot;img/images/chat.ico&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;js/bootstrap.css&quot; type=&quot;text/css&quot; /&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .tips&#123;</span><br><span class="line">            font-size: 28px;</span><br><span class="line">            font-family: &quot;楷体&quot;;</span><br><span class="line">            padding: 10px;</span><br><span class="line">        &#125;</span><br><span class="line">        .contentMain&#123;</span><br><span class="line">            width: 600px;</span><br><span class="line">            height: 500px;</span><br><span class="line">            position:absolute;</span><br><span class="line">            left:35%;</span><br><span class="line">            top:40%;</span><br><span class="line">            z-index: 999;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;loginImg&quot; style=&quot;margin: 4% 0;&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;images/005.jpg&quot; style=&quot;width: 100%;&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;contentMain&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;row tips&quot;&gt;请先输入你在聊天室的昵称 &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;row form-group&quot;&gt;</span><br><span class="line">        &lt;span class=&quot;col-md-6&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; id=&quot;name&quot; class=&quot;form-control&quot; placeholder=&quot;昵称&quot;/&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;span class=&quot;col-md-3&quot;&gt;</span><br><span class="line">            &lt;button class=&quot;btn btn-default&quot; id=&quot;login&quot;&gt;确认&lt;/button&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/bootstrap.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(function()&#123;</span><br><span class="line">       $(&apos;button&apos;).click(function()&#123;</span><br><span class="line">           var name=$(&apos;#name&apos;).val();</span><br><span class="line">           $.post(&apos;/login&apos;,&#123;name:name&#125;,function(data)&#123;</span><br><span class="line">               if(data==&quot;success&quot;)&#123;</span><br><span class="line">                   window.location.href=&apos;/index&apos;;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p></p><p>聊天室页面:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">//  views/index.html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;简化聊天室&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;bookmark&quot;  type=&quot;image/x-icon&quot;  href=&quot;images/chat.ico&quot;/&gt;</span><br><span class="line">    &lt;link rel=&quot;shortcut icon&quot; href=&quot;images/chat.ico&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;icon&quot; href=&quot;img/images/chat.ico&quot;&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;js/bootstrap.css&quot; type=&quot;text/css&quot; /&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body&#123;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">            font-family: &quot;楷体&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        .contentMain&#123;</span><br><span class="line">            width: 700px;</span><br><span class="line">            height: 800px;</span><br><span class="line">            position:absolute;</span><br><span class="line">            left:5%;</span><br><span class="line">            top:6%;</span><br><span class="line">            z-index: 999;</span><br><span class="line">        &#125;</span><br><span class="line">        .welcome&#123;</span><br><span class="line">            height: 6%;</span><br><span class="line">            font-family: &quot;楷体&quot;;</span><br><span class="line">            font-size:35px;</span><br><span class="line">            background-color: #d0e9c6;</span><br><span class="line">        &#125;</span><br><span class="line">        .chatContent&#123;</span><br><span class="line">            height:600px;</span><br><span class="line">            border-radius: 5px;</span><br><span class="line">            border: 1px solid #555555;</span><br><span class="line">            overflow-y: auto;</span><br><span class="line">            overflow-x: hidden;</span><br><span class="line">            padding: 5px;</span><br><span class="line">            margin-bottom: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">        .talkString&#123;</span><br><span class="line">            margin-top:15px;</span><br><span class="line">        &#125;</span><br><span class="line">        .myTalk&#123;</span><br><span class="line">            border:1px solid #00B7FF;</span><br><span class="line">            border-radius: 5px;</span><br><span class="line">            width: auto;</span><br><span class="line">            padding: 5px;</span><br><span class="line">            background-color: #d6e9c6;</span><br><span class="line">        &#125;</span><br><span class="line">        #content&#123;</span><br><span class="line">            padding:2px 10px 2px 10px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;welcome&quot; align=&quot;center&quot;&gt;</span><br><span class="line">    欢迎您: &lt;span id=&quot;name&quot;&gt;&lt;%=name%&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;bgImage&quot;&gt;</span><br><span class="line">    &lt;img src=&quot;images/005.jpg&quot; style=&quot;width: 100%;height: 100%&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;contentMain&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;chatContent&quot;&gt;</span><br><span class="line">        &lt;span&gt;聊天记录:&lt;/span&gt;</span><br><span class="line">        &lt;div id=&quot;content&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;span class=&quot;col-md-10&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;col-md-2&quot;&gt; 内容:&lt;/span&gt;</span><br><span class="line">            &lt;span class=&quot;col-md-10&quot;&gt;</span><br><span class="line">                &lt;input type=&quot;text&quot; id=&quot;myWord&quot; class=&quot;form-control&quot; placeholder=&quot;请输入要发送的内容&quot;/&gt;</span><br><span class="line">            &lt;/span&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;span class=&quot;col-md-2&quot;&gt;</span><br><span class="line">            &lt;button class=&quot;btn btn-default&quot;&gt;发送&lt;/button&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/socket.io.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/bootstrap.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p></p><p>最后实现我们客户端的 socket，进行与服务端进行通信:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">//   js/main.js</span><br><span class="line">$(function()&#123;</span><br><span class="line">var name = $(&apos;#name&apos;).text();</span><br><span class="line">    // 向服务器发起连接请求</span><br><span class="line">var socket = io.connect(&apos;http://localhost:3070&apos;);</span><br><span class="line">socket.on(&apos;connected&apos;,function()&#123;  // 监听连接信息</span><br><span class="line">console.log(&apos;已连接&apos;);</span><br><span class="line">socket.send(&quot;系统：&quot;+name+&quot; 连接成功&quot;);   // 向客户端发送消息</span><br><span class="line">&#125;);</span><br><span class="line">socket.on(&apos;content&apos;,function(msg)&#123;          // 监听服务器发送的消息</span><br><span class="line">var talker=&quot;&quot;;</span><br><span class="line">var talk=&quot;&quot;;</span><br><span class="line">var talkString=&quot;&quot;;</span><br><span class="line">if(msg.indexOf(&apos;:&apos;)&gt;0)&#123;</span><br><span class="line">talker=msg.substring(0,msg.indexOf(&apos;:&apos;));</span><br><span class="line">if(msg.indexOf(&quot;&lt;script&gt;&quot;)&gt;0&amp;&amp;msg.indexOf(&quot;&lt;/script&gt;&quot;)&gt;0) &#123;</span><br><span class="line">msg = msg.replace(&quot;&lt;script&gt;&quot;, &quot;&quot;);</span><br><span class="line">msg = msg.replace(&quot;&lt;/script&gt;&quot;, &quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">talk=msg.substring(msg.indexOf(&apos;:&apos;)+1);</span><br><span class="line">if(talker==name)&#123;</span><br><span class="line">talkString=&quot;&lt;div class=&apos;row talkString&apos; align=&apos;right&apos;&gt;&quot; +</span><br><span class="line">&quot;&lt;span class=&apos;myTalk&apos;&gt;&quot;+talk+&quot;&lt;/span&gt;&quot; +</span><br><span class="line">&quot;&lt;span&gt; &quot;+talker+&quot;&lt;/span&gt;&quot; +</span><br><span class="line">&quot;&lt;/div&gt;&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">talkString=&quot;&lt;div class=&apos;row talkString&apos;&gt;&quot; +</span><br><span class="line">&quot;&lt;span&gt;&quot;+talker+&quot;: &lt;/span&gt;&quot; +</span><br><span class="line">&quot;&lt;span class=&apos;myTalk&apos;&gt;&quot;+talk+&quot;&lt;/span&gt;&quot; +</span><br><span class="line">&quot;&lt;/div&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">talkString=&quot;&lt;div class=&apos;row&apos;&gt;&quot;+msg+&quot;&lt;/div&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$(&apos;#content&apos;).append(talkString);</span><br><span class="line">scrollBar();</span><br><span class="line">&#125;);</span><br><span class="line">$(&apos;button&apos;).click(function()&#123;</span><br><span class="line">var myWord=$(&apos;#myWord&apos;).val();</span><br><span class="line"></span><br><span class="line">if(socket)&#123;</span><br><span class="line">socket.send(name+&quot;:&quot;+myWord);</span><br><span class="line">$(&apos;#myWord&apos;).val(&quot;&quot;);</span><br><span class="line">scrollBar();</span><br><span class="line">&#125;else&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">//回车发送消息</span><br><span class="line">document.onkeydown = function(e)&#123;</span><br><span class="line">var ev = document.all ? window.event : e;</span><br><span class="line">if(ev.keyCode==13) &#123;</span><br><span class="line">$(&apos;button&apos;).click();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function scrollBar()&#123;</span><br><span class="line">$(&quot;.chatContent&quot;).scrollTop($(&quot;.chatContent&quot;)[0].scrollHeight);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><p>至此，我们的主要工作基本上完成了，其实也没有多少东西</p><ul><li>创建 socket 服务器，监听客户端连接与消息，发送消息、广播消息</li><li>socket客户端向服务器申请连接，发送与监听消息</li></ul><p>这次只是做了一个简易的聊天室功能，下次我们加入 redis 的 订阅/发布 模式，完成更复杂更灵活的聊天功能，敬请期待!</p><p>项目结构:<br><img src="http://blog-img.muxiao520.com/chatrrom-codelist.png" alt="codelist"></p><p>控制台信息:<br><img src="http://blog-img.muxiao520.com/chatroom-consolelog.png" alt="consolelog"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;img src=&quot;http://blog-img.muxiao520.com/chatroom-logo.jpg&quot; alt=&quot;logo&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="Nodejs" scheme="http://blog.hully.fun/categories/Nodejs/"/>
    
      <category term="Express" scheme="http://blog.hully.fun/categories/Nodejs/Express/"/>
    
    
      <category term="Node" scheme="http://blog.hully.fun/tags/Node/"/>
    
      <category term="Express" scheme="http://blog.hully.fun/tags/Express/"/>
    
      <category term="socket.io" scheme="http://blog.hully.fun/tags/socket-io/"/>
    
  </entry>
  
  <entry>
    <title>Git 使用实战</title>
    <link href="http://blog.hully.fun/Git%20%E4%BD%BF%E7%94%A8%E5%AE%9E%E6%88%98.html"/>
    <id>http://blog.hully.fun/Git 使用实战.html</id>
    <published>2016-12-18T16:00:00.000Z</published>
    <updated>2018-12-17T03:47:45.261Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --><p>Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。<br>作为一个标准的程序猿，Git的使用是必须掌握的。为什么呢？高端大气上档次装B必备技能，哈哈~</p><p>这里就记录一下自己在使用Git的过程中遇到的问题以及总结，如有不对处还请指正，谢谢。</p><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><h4 id="Linux-上安装Git"><a href="#Linux-上安装Git" class="headerlink" title="Linux 上安装Git"></a>Linux 上安装Git</h4><p>Linux 各版本通用的源码安装:<br>先从官网下载源码然后解压，依次执行./config, make , sudo make install 即可<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">mkdir software</span><br><span class="line">cd software</span><br><span class="line">wget https://www.kernel.org/pub/software/scm/git/git-2.10.5.tar.gz</span><br><span class="line">tar -zxvf git-2.10.5.tar.gz</span><br><span class="line">cd git-2.10.5</span><br><span class="line">./config</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p></p><p>安装过程中请耐心等待，安装成功后在命令行输入 git –version 显示出版本号那么恭喜你，安装成功！</p><h4 id="Mac-上安装Git-本文的环境"><a href="#Mac-上安装Git-本文的环境" class="headerlink" title="Mac 上安装Git(本文的环境)"></a>Mac 上安装Git(本文的环境)</h4><p>采用Homebrew 的方式安装，如果你的机器上没安装 Homebrew 建议先安装 <a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a>,然后根据其文档进行安装 Git 即可</p><h4 id="Windows-上安装Git"><a href="#Windows-上安装Git" class="headerlink" title="Windows 上安装Git"></a>Windows 上安装Git</h4><p>在 Windows 上安装使用 Git, 是不是首先就想到了 exe 文件呢，哈哈~ Windows 忠实粉。<br>我们到Git官网上去下载 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git安装包</a>, 然后默认安装一路到底就行，安装成功后找到 Git Bash 点击打开会弹出 Git命令窗口，恭喜你，安装成功了！<br>安装成功后还需要配置一下Git环境,在弹出的命令行中输入:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;Your Email&quot;</span><br></pre></td></tr></table></figure><p></p><p>注意<font face="微软雅黑" color="red" size="3"> git config </font>命令的 <font face="微软雅黑" color="red" size="3">–global </font>参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>git init<br>初始化本地工作目录，git init blog</li><li>git clone 从远程的版本库克隆到本地，git clone git://github.com/jquery/jquery.git</li><li>git status 查看仓库状态</li><li><p>git remote 访问远程服务器上创建一个目录</p><ul><li>git remote -v 查看远程仓库</li><li>git remote add [name] [url] 添加远程仓库</li><li>git remote rm [name] 删除远程仓库</li><li>git remote set-url –push [name] [newUrl] 修改远程仓库</li><li>git pull [remoteName] [localBranchName] 拉取远程仓库到本地分支</li><li>git push [remoteName] [localBranchName] 将本地分支代码推送到远程仓库</li></ul></li><li><p>git add 将修改添加到暂存区</p><ul><li>git add . 添加所有的修改</li><li>git add filename 添加指定文件的修改</li><li>git add *.json 添加所有 json 文件</li><li>git add book* 添加所有 book 开头的文件</li></ul></li><li>git commit -m “comment” 将暂存区的代码提交到仓库，comment 可作注释</li><li>git pull 拉取远程仓库</li><li>git push 推送代码到仓库</li><li>git branch 分支<ul><li>git branch 查看本地所有分支</li><li>git branch -r 查看远程分支</li><li>git branch [newBranchName] 创建本地新分支</li><li>git checkout [branchName] 切换到一个存在的分支</li><li>git checkout -b [newBranchName] 创建新分支，并切换到新分支</li><li>git branch -d [branchName] 删除指定分支(已和产生该分支的主分支合并)</li><li>git branch -D [branchName] 强制删除指定分支,无论是否合并</li><li>git push origin [branchName] 创建远程分支(本地分支push到远程)</li></ul></li><li>git checkout<ul><li>git checkout . 丢弃工作区所有的修改退回到原始状态，不包括添加到暂存区的修改</li><li>git checkout filename 丢弃指定文件的修改回到原始状态</li><li>git checkout branchName 切换到指定分支</li></ul></li><li>git reset 版本回退<ul><li>git reset HEAD filename 丢弃指定文件添加到暂存区的修改</li><li>git reset –hard HEAD^</li><li>git reset –hard HEAD^^</li><li>git reset –hard HEAD~100</li><li>git reset –hard 321456</li></ul></li><li>git log 查看 git 的 commit 信息，包括注释在内</li><li>git diff 在文件修改了未提交之前查看修改的部分</li><li>git merge branchName 合并指定分支到当前分支</li><li><p>git stash 将当前工作区的修改暂存起来，就像堆栈一样，可以随时将某一次缓存的修改再重新应用到当前工作区</p><ul><li>git stash 暂存当前修改内容到堆栈</li><li>git stash list 查看当前暂存堆栈列表</li><li>git stash apply@{x} 应用任意一次修改到当前工作区，其修改内容还继续保留在暂存列表，并未丢弃</li><li>git stash pop 弹出最近的暂存，弹出后列表里将不再有了，如果当前工作区不干净，弹出时有冲突，则暂存列表会继续保留修改</li><li>git stash save [comment] 保存时打标记，使得你用git stash list的时候显示这些标记，方便你回忆是修改的什么</li><li>git stash drop stash@{x} 丢弃某次修改</li></ul></li><li><p>.gitignore 提交时忽略的文件配置</p><p>有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们,这个时候就需要用到此文件了。在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure></li></ul><h3 id="分支管理-项目管理"><a href="#分支管理-项目管理" class="headerlink" title="分支管理(项目管理)"></a>分支管理(项目管理)</h3><p>当我们创建一个项目的代码仓库的时候，会默认创建一个主分支 master 分支，但实际应用中，对于一般的线上项目而言，我们基本上都会按照项目环境进行创建相应的分支，比如:<br>| 环境 | 分支 |<br>| - | -: |<br>| 开发环境 | development |<br>| 测试环境 | test |<br>| 预发布环境 | stage |<br>| 生产环境 | online |<br>当我们需要进行协同开发的时候，从远程仓库将代码克隆到本地，然后创建属于自己的develop 分支，待完成编码之后将代码 merge 到 test 分支提交到远程仓库供测试人员进行初步测试，初步测试通过之后发布之前将代码合并到stage 分支进行预发布测试，再次测试通过之后，将代码 merge 到 online 分支发布上线。具体的各分支以及开发人员之间的协同与配合，请自行查阅。</p><h3 id="代码托管平台"><a href="#代码托管平台" class="headerlink" title="代码托管平台"></a>代码托管平台</h3><h4 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h4><p><img src="http://blog-img.muxiao520.com/github.JPG" width="150" height="100"><br><br>GitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。其使用的基于Web的代码托管服务，是目前全球最大的开源社交编程及代码托管网站。<br><br>我一直用GitHub作为免费的远程仓库，如果是个人的开源项目，放到GitHub上是完全没有问题的。其实GitHub还是一个开源协作社区，通过GitHub，既可以让别人参与你的开源项目，也可以参与别人的开源项目。</p><h5 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h5><p>打开<a href="https://github.com/" target="_blank" rel="noopener">Github 官网</a>,填写资料点击 Sign up for Github<br><img src="http://blog-img.muxiao520.com/github-signin.png" alt="github sign in"></p><h5 id="创建代码仓库"><a href="#创建代码仓库" class="headerlink" title="创建代码仓库"></a>创建代码仓库</h5><p>注册成功之后，登录点击头像按钮选择 Your profile -&gt; Repostories -&gt; New 创建一个代码仓库；<br><img src="http://blog-img.muxiao520.com/GitHub%20new%20repo.png" alt="Create new Github repo"></p><h5 id="SSH-配置"><a href="#SSH-配置" class="headerlink" title="SSH 配置"></a>SSH 配置</h5><p>本地装好 git 之后，需要我们生成 SSH key 和我们的 github 账户进行关联，执行 ssh-keygen -t rsa -C “<a href="mailto:email@foxmaol.com" target="_blank" rel="noopener">email@foxmaol.com</a>“ 然后一路到底即可，就会在你的.ssh 文件夹下生成两个文件 id_rsa 和 id_rsa.pub,分别为私钥和公钥。<br><br>回到github网站上来点击 头像 -&gt; Settings -&gt; SSH and GPG keys -&gt; New SSH key,其中 title 可以自定义填写，将刚才生成的公钥里的内容全部复制下来粘贴到 Key 的输入框中点击下方 Add SSH key 即可<br><img src="http://blog-img.muxiao520.com/github%20add%20ssh%20key.png" alt="add ssh key"><br>然后就可以通过 SSH 的方式 clone你自己github上的仓库了</p><h4 id="Bitbucket"><a href="#Bitbucket" class="headerlink" title="Bitbucket"></a>Bitbucket</h4><p><img src="http://blog-img.muxiao520.com/bitbucket.jpg" width="200" height="100"><br><br>BitBucket 是一家源代码托管网站，采用Mercurial和Git作为分布式版本控制系统，同时提供商业计划和免费账户。</p><h5 id="特点"><a href="#特点" class="headerlink" title="特点:"></a>特点:</h5><ul><li>无限制的私有仓库个数</li><li>无限制的磁盘空间</li><li>同时支持https/ssh</li><li>Bug 跟踪</li><li>项目Wiki</li><li>API 支持</li><li>灵活的权限控制</li><li>可自定义域名</li><li>RSS 修改记录输出</li><li>自定义下载</li></ul><p>对于个人来说最重要的就是<font face="微软雅黑" color="red" size="3">无限制的私有仓库个数</font>啦，有一些不希望别人看到源码的项目就可以托管到这里来，使用和 Github 一样的。 <a href="https://bitbucket.org/" target="_blank" rel="noopener">Bitbucket 官网</a></p><h4 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h4><p><img src="http://blog-img.muxiao520.com/coding.jpg" width="150" height="100"><br><br>Coding 是一个面向开发者的云端开发平台，目前提供代码托管，运行空间，质量控制，项目管理等功能。此外，还提供社会化协作功能，包含了社交元素，方便开发者进行技术讨论和协作, 是目前国内体验最接近 github 的产品。<br><br>也可以创建私有项目，还提供了webIDE，所有的工作可全部在云端完成。</p><blockquote><p>Coding，让开发更简单！<br><a href="https://coding.net/" target="_blank" rel="noopener">Coding 官网</a></p></blockquote><h4 id="码云"><a href="#码云" class="headerlink" title="码云"></a>码云</h4><p><img src="http://blog-img.muxiao520.com/%E7%A0%81%E4%BA%91.jpg" width="100" height="100"><br><br>关于码云的使用，推荐到廖雪峰老师的博客<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00150154460073692d151e784de4d718c67ce836f72c7c4000" target="_blank" rel="noopener">使用码云-廖雪峰</a>看一下，其写的很详细了，在这里谢谢廖雪峰老师。 <a href="https://gitee.com/" target="_blank" rel="noopener">码云官网</a></p><h4 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h4><p><img src="http://blog-img.muxiao520.com/gitlab.jpg" width="100" height="100"><br><br>gitlab是一个利用 Ruby on Rails 开发的开源应用程序，实现一个自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。<br><a href="https://about.gitlab.com/" target="_blank" rel="noopener">GitLab 官网</a></p><p>关于这几个托管平台的比较，请参考<a href="https://www.cnblogs.com/fir-im/p/5956609.html" target="_blank" rel="noopener">GitHub &amp; Bitbucket &amp; GitLab &amp; Coding 的对比分析-FIR-im官方</a></p><h3 id="多平台同时使用"><a href="#多平台同时使用" class="headerlink" title="多平台同时使用"></a>多平台同时使用</h3><p>如何进行多个代码托管平台在一台电脑上同时使用呢？我们知道本地电脑与平台之间的通信校验是通过 ssh 配置进行的，那么我们就要来配置我们的 ssh了。<br><br>在上边我们已经介绍过如何生成 ssh key 以及如何添加到我们的平台账户里。<br>做到多平台同时使用首先我们要为每个平台生成一个 key（如果注册邮箱一样可以使用同一套公钥私钥）并将公钥添加到平台的 SSH 配置中, 接下来就是编写我们的.ssh/config,如下<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User git</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_git</span><br><span class="line"></span><br><span class="line">Host bitbucket.org</span><br><span class="line">    User git</span><br><span class="line">    HostName bitbucket.org</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_bit</span><br><span class="line"></span><br><span class="line">Host coding.net</span><br><span class="line">User git</span><br><span class="line">HostName coding.net</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_coding</span><br></pre></td></tr></table></figure><p></p><p>编写完进行保存，这样我们就可以通过 SSH 的方式克隆各平台的仓库并提交我们的代码了，具体的各参数的意义请参考 <a href="http://blog.csdn.net/Walkerhau/article/details/77394666" target="_blank" rel="noopener">如何使用特定的SSH Key提交GIT</a></p><h3 id="推荐工具"><a href="#推荐工具" class="headerlink" title="推荐工具"></a>推荐工具</h3><p><a href="http://gitforwindows.org/" target="_blank" rel="noopener">Git Windows 客户端</a><br><br><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">SourceTree</a></p><h3 id="借鉴"><a href="#借鉴" class="headerlink" title="借鉴"></a>借鉴</h3><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000" target="_blank" rel="noopener">搭建 Git 服务器-廖雪峰</a><br><a href="http://blog.csdn.net/Walkerhau/article/details/77394666" target="_blank" rel="noopener">如何使用特定的SSH Key提交GIT</a><br><a href="http://blog.csdn.net/lue2009/article/details/46551201" target="_blank" rel="noopener">通过SSH 密钥连接GitHub/Bitbucket</a><br><a href="https://www.cnblogs.com/fir-im/p/5956609.html" target="_blank" rel="noopener">GitHub &amp; Bitbucket &amp; GitLab &amp; Coding 的对比分析–FIRim官方</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。&lt;br&gt;作为一个标准的程序猿，Git的使用是必须掌握的。
      
    
    </summary>
    
      <category term="Git" scheme="http://blog.hully.fun/categories/Git/"/>
    
    
      <category term="github" scheme="http://blog.hully.fun/tags/github/"/>
    
      <category term="git" scheme="http://blog.hully.fun/tags/git/"/>
    
      <category term="ssh-keygen" scheme="http://blog.hully.fun/tags/ssh-keygen/"/>
    
      <category term=".ssh" scheme="http://blog.hully.fun/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>阔别数月 踏雪归来：Express 第二弹之 Sequelizejs + Mysql</title>
    <link href="http://blog.hully.fun/%E9%98%94%E5%88%AB%E6%95%B0%E6%9C%88%20%E8%B8%8F%E9%9B%AA%E5%BD%92%E6%9D%A5%EF%BC%9AExpress%20%E7%AC%AC%E4%BA%8C%E5%BC%B9%E4%B9%8B%20Sequelizejs.html"/>
    <id>http://blog.hully.fun/阔别数月 踏雪归来：Express 第二弹之 Sequelizejs.html</id>
    <published>2016-11-30T16:00:00.000Z</published>
    <updated>2018-01-22T02:09:44.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --><h4 id="Node开发过程中一些工具："><a href="#Node开发过程中一些工具：" class="headerlink" title="Node开发过程中一些工具："></a>Node开发过程中一些工具：</h4><ul><li>sequelizejs: 基于promise的一个关系数据库ORM</li><li>squel.js: 基于Javascript的SQL查询构建器</li><li>node-only: return whitelisted properties of an object</li><li>wga: a generator, async/await wrapper</li><li>lodash: 提供很多干净，高性能的实用方法，减少LOC，改善应用程序逻辑清晰</li><li>jsonwebtoken: token处理</li><li>pinyin: 轻量级的Node拼音库，支持中文，拼音双向转换及多种转化方式</li><li>request-promise: 将request访问第三方/爬虫 转换成promise方式</li><li>es6-promisify: Convents callback-based functions to Promise-based functions.</li><li>co: Generator based control flow goodness for nodejs and the browser,using promises,letting you write non-blocking code in a nice-ish way.将generator函数转换成primise对象，使用.then的形式。</li><li>thinkify: 配合co进行使用</li><li>fluent-ffmpeg:进行视频转换，获取视频缩略图</li><li>aws-sdk: 亚马逊云存储服务</li><li>multer: nodejs中间件，上传文件</li><li>apidoc: 生成API文档</li><li>grunt: 自动化构建工具</li><li>glup: 基于流的自动化构建工具</li><li>webpack: 自动化构建工具</li><li>node-tesseract: 图像处理工具，可以进行图像识别(验证码识别)</li><li>forever: node进程守护者</li><li>images: Node.js 轻量级跨平台图像编解码库(加水印等)</li></ul><p>在我们接下来的实例中将回归采用关系型数据库Mysql, 在这里我选择sequelize作为我们的ORM。</p><p>安装： cnpm install sequelize –save-dev<br>使用： 先直接上代码，然后再进行解析</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">import express from &quot;express&quot;;</span><br><span class="line"></span><br><span class="line">import Sequelize from &apos;sequelize&apos;;</span><br><span class="line"></span><br><span class="line">import co from &apos;co&apos;;</span><br><span class="line"></span><br><span class="line">import wga from &apos;wga&apos;;</span><br><span class="line"></span><br><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line">// 配置 连接数据库</span><br><span class="line">let sequelize = new Sequelize(</span><br><span class="line">&apos;test&apos;,</span><br><span class="line">&apos;root&apos;,</span><br><span class="line">&apos;&apos;,</span><br><span class="line">&#123;</span><br><span class="line">&apos;dialect&apos;:&apos;mysql&apos;,</span><br><span class="line">&apos;host&apos;:&apos;localhost&apos;,</span><br><span class="line">&apos;port&apos;:3306</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">//定义model  映射数据表</span><br><span class="line">let User = sequelize.define(&apos;student&apos;,&#123;</span><br><span class="line">name:&#123;type: Sequelize.STRING&#125;,//数据类型</span><br><span class="line">age:&#123;type: Sequelize.INTEGER&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 将Model  同步到数据库</span><br><span class="line">co(function* ()&#123;</span><br><span class="line">yield User.sync(&#123;force: true&#125;);</span><br><span class="line">console.log(&apos;Database prepared already&apos;);</span><br><span class="line">&#125;).catch( err =&gt; console.log(err) );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;,(req, res, next) =&gt; &#123;</span><br><span class="line">res.send(&quot;hello baby&quot;);</span><br><span class="line">next();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(&apos;/students&apos;, wga(function* (req, res) &#123;</span><br><span class="line">let stds = yield User.findAll();</span><br><span class="line">res.json(stds);</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.use((req, res, next) =&gt; &#123;</span><br><span class="line">let err = new Error(&apos;Not Found&apos;);</span><br><span class="line">err.status = 404;</span><br><span class="line">next(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">let server = app.listen(8081,() =&gt; &#123;</span><br><span class="line">let host = server.address().address;</span><br><span class="line">let port = server.address().port;</span><br><span class="line">console.log(&quot;服务启动成功，访问地址为 http://%s:%s&quot;,host,port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>首先通过new Sequelize进行配置连接我们的数据库；</p><ul><li>test: 指的是我们要连接的数据库</li><li>root: 用户名，接下里的一个参数为密码，我这里的密码为空</li><li>dialect: 指的是我们使用的数据库类型，这里我使用的是mysql数据库</li><li>host 和 port 就不用多说了</li></ul><p>接下来就是创建Model(对应的是数据库中的表)，然后将Model同步到数据库中，这样就可以进行数据库的操作了。<br>源码参见：<a href="https://github.com/huleile/express-sequelize-sample" target="_blank" rel="noopener">https://github.com/huleile/express-sequelize-sample</a></p><p>引自: <a href="http://blog.163.com/hule_sky/blog/static/2091622452016103011289517/" target="_blank" rel="noopener">网易博客(奔跑吧~昭熙小乐)</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --&gt;&lt;h4 id=&quot;Node开发过程中一些工具：&quot;&gt;&lt;a href=&quot;#Node开发过程中一些工具：&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Nodejs" scheme="http://blog.hully.fun/categories/Nodejs/"/>
    
      <category term="Express" scheme="http://blog.hully.fun/categories/Nodejs/Express/"/>
    
    
      <category term="Node" scheme="http://blog.hully.fun/tags/Node/"/>
    
      <category term="Express" scheme="http://blog.hully.fun/tags/Express/"/>
    
      <category term="Sequelize" scheme="http://blog.hully.fun/tags/Sequelize/"/>
    
      <category term="Mysql" scheme="http://blog.hully.fun/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>阔别数月 踏雪归来：Express 第一弹之 ES6的使用</title>
    <link href="http://blog.hully.fun/%E9%98%94%E5%88%AB%E6%95%B0%E6%9C%88%20%E8%B8%8F%E9%9B%AA%E5%BD%92%E6%9D%A5%EF%BC%9AExpress%20%E7%AC%AC%E4%B8%80%E5%BC%B9%E4%B9%8B%20ES6%E7%9A%84%E4%BD%BF%E7%94%A8.html"/>
    <id>http://blog.hully.fun/阔别数月 踏雪归来：Express 第一弹之 ES6的使用.html</id>
    <published>2016-11-29T16:00:00.000Z</published>
    <updated>2018-12-17T03:47:45.261Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --><p>&emsp;&emsp;自踏上Node的征程，觅着MEAN的路一直前进着，自认为还可以的时候到了华尔街英语，和这里的一位导师的谈话給了我沉重的一击，进行了重新的思考，重新的去认识自己，去规划自己。在这里，发自内心的说句谢谢您。</p><p>&emsp;&emsp;最近去各大招聘网站上去了解当下Node职位的发展和各企业对相应技术的要求，大概的进行了总结一下，作为一个朝着全栈工程师方向努力的程序员，在编码方面需要学习掌握的技术线如下：</p><ul><li>前端： H5, CSS3, Jquery, angular, react, vue</li><li>后端：Node(express, koa, strongLoop), python, ruby, (php, java最好也要了解)</li><li>数据库：redis, mongo, mysql, postgresql</li></ul><p>&emsp;&emsp;本次将以Node Express+mysql+es6为线，慢慢将开发过程中遇到的问题进行剖析梳理，谨。<br>自ECMA2015发布以来，对于Node开发人员来说是必不可缺的一项基本技能，将ES6的优势应用到我们的项目中去，接下来按部就班。</p><p>&emsp;&emsp;由于ES6的语法当前支持的并不是很完善，想要在项目中使用ES6语法还需要我们借助一些转码翻译工具，将项目中的ES6语法翻译成ES5语法，当前支持比较好的两个工具分别为 babel , traceur.</p><p>babel 使用的比较广泛，也是我们接下来在项目中使用的转码器</p><h4 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h4><p>如何在项目中进行使用babel:</p><ol><li><p>安装babel-cli</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g babel-cli</span><br></pre></td></tr></table></figure><p>安装成功后系统将获得两个命令：</p><ul><li>babel 编译器，将es6语法编译成es5语法</li><li>babel-node 可以直接运行ES2015程序的Node命令</li></ul></li><li><p>创建项目 创建ES2015语法文件 babel-node进行执行 此时你会发现如下错误<br><img src="http://blog-img.muxiao520.com/es6-1.png" alt="错误信息"><br>由信息可知，是不支持 import 语法导致，需要我们进行配置相应的babel插件才能支持它。项目的根目录新建文件 .babelrc , 输入内容<br>{ “presets”: [“es2015”] }, 接下来进行安装插件依赖的模块，执行以下命令安装并保存到package.json的devDependencies中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install babel-preset-es2015 --save-dev</span><br></pre></td></tr></table></figure></li><li><p>重新执行一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">babel-node test.js</span><br></pre></td></tr></table></figure></li></ol><p>就能看到此时的运行结果了，说明我们此时的开发环境已经成功支持ES2015的语法了。</p><h4 id="Traceur"><a href="#Traceur" class="headerlink" title="Traceur"></a>Traceur</h4><pre><code class="bash">cnpm install -g traceur</code></pre><p>在命令行执行 traceur filename.js就能执行ES6语法的JS文件了。</p><p>引自: <a href="http://blog.163.com/hule_sky/blog/static/20916224520161030113612835/" target="_blank" rel="noopener">网易博客(奔跑吧~昭熙小乐)</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&amp;emsp;&amp;emsp;自踏上Node的征程，觅着MEAN的路一直前进着，自认为还可以的时候到了华尔街英语，和这里的一位导师的谈话給了我沉重的一
      
    
    </summary>
    
      <category term="Nodejs" scheme="http://blog.hully.fun/categories/Nodejs/"/>
    
      <category term="Express" scheme="http://blog.hully.fun/categories/Nodejs/Express/"/>
    
    
      <category term="Node" scheme="http://blog.hully.fun/tags/Node/"/>
    
      <category term="Express" scheme="http://blog.hully.fun/tags/Express/"/>
    
      <category term="ES6" scheme="http://blog.hully.fun/tags/ES6/"/>
    
      <category term="babel" scheme="http://blog.hully.fun/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs 开发第一个 CLI(命令行界面) 程序</title>
    <link href="http://blog.hully.fun/Nodejs%20%E5%BC%80%E5%8F%91%E7%AC%AC%E4%B8%80%E4%B8%AA%20CLI(%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%95%8C%E9%9D%A2)%20%E7%A8%8B%E5%BA%8F.html"/>
    <id>http://blog.hully.fun/Nodejs 开发第一个 CLI(命令行界面) 程序.html</id>
    <published>2016-07-20T16:00:00.000Z</published>
    <updated>2018-12-17T03:47:45.189Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --><p>一直拿Node 做Web程序/项目 ，这两天看一些东西看到了数据结构，就想到了当初数据结构作业都是命令行界面的程序，就想Node能不能做呢，就试了试，以下就是成果喽。<br>切入到一个目录下，新建一个文档为index.js, 如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">var stdin = process.stdin;</span><br><span class="line">var stdout = process.stdout;</span><br><span class="line"></span><br><span class="line">var curDir = process.cwd();</span><br><span class="line">function getDirectoryData(dir)&#123;</span><br><span class="line">fs.readdir(dir,function(err,files)&#123;</span><br><span class="line">console.log(&quot;&quot;);</span><br><span class="line">if(!files.length)&#123;</span><br><span class="line">return console.log(&apos;\0333[31m No files to show! \033[39m\n&apos;);</span><br><span class="line">&#125;</span><br><span class="line">console.log(&apos;Select which file or directory you want to see! \n&apos;);</span><br><span class="line"></span><br><span class="line">function file(i)&#123;</span><br><span class="line">var filename = files[i];</span><br><span class="line"></span><br><span class="line">var statFile = fs.statSync(__dirname + &apos;/&apos; + filename);</span><br><span class="line">if(statFile.isDirectory())&#123;</span><br><span class="line">console.log(&apos;&apos;+ ++i + &apos;\033[31m&apos; + filename + &apos;/\033[39m&apos;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">console.log(&apos;&apos;+  ++i + &apos;\033[90m&apos; + filename + &apos;\033[39m&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if( i == files.length)&#123;</span><br><span class="line">read();</span><br><span class="line">&#125;else&#123;</span><br><span class="line">file(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">file(0);</span><br><span class="line"></span><br><span class="line">function read()&#123;</span><br><span class="line">console.log(&apos;&apos;);</span><br><span class="line">stdout.write(&apos; \033[33m Enter your choice:　\033[39m&apos;);</span><br><span class="line">stdin.resume();</span><br><span class="line">stdin.setEncoding(&apos;utf8&apos;);</span><br><span class="line"></span><br><span class="line">stdin.on(&apos;data&apos;,option);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function option(data)&#123;</span><br><span class="line">var filename = files[Number(data)-1];</span><br><span class="line">if(fs.statSync(__dirname + &apos;/&apos; + filename).isDirectory())&#123;</span><br><span class="line">stdin.pause();</span><br><span class="line">fs.readdir(__dirname + &apos;/&apos; +filename,function(err,files)&#123;</span><br><span class="line">console.log(&apos;&apos;);</span><br><span class="line">console.log(&apos;(&apos; + files.length + &apos;  files)&apos;);</span><br><span class="line">files.forEach(function(file)&#123;</span><br><span class="line">console.log(&apos;--  &apos; + file);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(&apos;&apos;);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">stdin.pause();</span><br><span class="line">fs.readFile(__dirname + &apos;/&apos; +filename,&apos;utf8&apos;,function(err,data)&#123;</span><br><span class="line">console.log(&apos;&apos;);</span><br><span class="line">console.log(&apos;\033[90m&apos; + data.replace(/(.*)/g,&apos;$1&apos;) + &apos;\033[39m&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">getDirectoryData(curDir);</span><br></pre></td></tr></table></figure><p>以上代码就是实现了一个window dos命令下的一个目录文件查看程序；<br>DOS CD 到index.js文件所在目录下，运行node index.js，效果如下:</p><p><img src="http://blog-img.muxiao520.com/node-cli-1.png" alt="图一 入口"><br>选择1, 回车打开文件如下:</p><p><img src="http://blog-img.muxiao520.com/node-cli-2.png" alt="图二"><br>选择7, 回车:</p><p><img src="http://blog-img.muxiao520.com/node-cli-3.png" alt="图三"></p><p>我们进入到磁盘目录下, 看一下我们的文件:</p><p><img src="http://blog-img.muxiao520.com/node-cli-4.png" alt="图四"></p><p><img src="http://blog-img.muxiao520.com/node-cli-5.png" alt="图五"></p><p><img src="http://blog-img.muxiao520.com/node-cli-6.png" alt="图六"></p><p>至此，第一个CLI程序结束，后续继续研究，如有不对之处还请指教。</p><p>引自: <a href="http://blog.163.com/hule_sky/blog/static/2091622452016621103745136/" target="_blank" rel="noopener">网易博客(奔跑吧~昭熙小乐)</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;一直拿Node 做Web程序/项目 ，这两天看一些东西看到了数据结构，就想到了当初数据结构作业都是命令行界面的程序，就想Node能不能做呢，就试
      
    
    </summary>
    
      <category term="Nodejs" scheme="http://blog.hully.fun/categories/Nodejs/"/>
    
    
      <category term="Node" scheme="http://blog.hully.fun/tags/Node/"/>
    
      <category term="CLI" scheme="http://blog.hully.fun/tags/CLI/"/>
    
  </entry>
  
  <entry>
    <title>Javascript 扩展内置对象</title>
    <link href="http://blog.hully.fun/Javascript%20%E6%89%A9%E5%B1%95%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1.html"/>
    <id>http://blog.hully.fun/Javascript 扩展内置对象.html</id>
    <published>2016-07-08T16:00:00.000Z</published>
    <updated>2018-01-22T02:11:06.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --><p>在js中，内建对象的构造器函数(例如 Array, String, Object 和 Function )都是可以通过其原型来进行扩展的；</p><h5 id="扩展一-inArray-string"><a href="#扩展一-inArray-string" class="headerlink" title="扩展一 inArray(string)"></a>扩展一 inArray(string)</h5><p>用于查询数组中是否存在某个特定的值<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.inArray = function(string)&#123;</span><br><span class="line">    for(var i=0; i&lt;this.length; i++)&#123;</span><br><span class="line">        if(this[i]===string)&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id="扩展二-reverse"><a href="#扩展二-reverse" class="headerlink" title="扩展二 reverse()"></a>扩展二 reverse()</h5><p>用于翻转字符串<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String.prototype.reverse = function()&#123;</span><br><span class="line">    return Array.prototype.reverse.apply(this.split(&quot;&quot;)).join(&quot;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h5 id="扩展三-trim"><a href="#扩展三-trim" class="headerlink" title="扩展三: trim()"></a>扩展三: trim()</h5><p>用于简化字符串，删除字符串两头的空格<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(typeof String.prototype.trim !== &apos;function&apos;)&#123;</span><br><span class="line">    String.prototype.trim=function()&#123;</span><br><span class="line">        return this.replace(/^\s+|\s+&amp;/g,&apos;&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>trim()方法是ES5标准的一部分，但是在老式的浏览器中并没有得到支持</p><h5 id="扩展四-shuffle"><a href="#扩展四-shuffle" class="headerlink" title="扩展四: shuffle()"></a>扩展四: shuffle()</h5><p>用于将一个数组进行随机打乱<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.shuffle=function()&#123;</span><br><span class="line">    var randomSort=function(a,b)&#123;</span><br><span class="line">        return Math.random()&gt;.5 ? -1 : 1;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    return this.sort(randomSort);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// eg:</span><br><span class="line">// var num=[1,2,3,4,5,6,7,8,9];</span><br><span class="line">// console.log(num.shuffle());</span><br></pre></td></tr></table></figure><p></p><p>注：如果想要通过原型为某个对象添加一个新属性，务必先检查一下该属性是否已经存在，避免当前浏览器已经支持相应的方法，我们又加以改写，导致的效果不一样而造成不必要的异常，如扩展三。</p><p>引自: <a href="http://blog.163.com/hule_sky/blog/static/20916224520166971132211/" target="_blank" rel="noopener">网易博客(奔跑吧~昭熙小乐)</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;在js中，内建对象的构造器函数(例如 Array, String, Object 和 Function )都是可以通过其原型来进行扩展的；&lt;/p
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.hully.fun/categories/JavaScript/"/>
    
    
      <category term="javascript" scheme="http://blog.hully.fun/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Window下 Node 实现二维码 + 验证码</title>
    <link href="http://blog.hully.fun/Window%E4%B8%8Bnode%E5%AE%9E%E7%8E%B0%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%BB%AD%20+%20%E9%AA%8C%E8%AF%81%E7%A0%81.html"/>
    <id>http://blog.hully.fun/Window下node实现二维码续 + 验证码.html</id>
    <published>2016-07-06T16:00:00.000Z</published>
    <updated>2018-12-17T03:47:45.189Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --><h4 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h4><ol><li><p>先安装 Python; 通过Python 官网 <a href="http://www.python.org/getit/" target="_blank" rel="noopener">http://www.python.org/getit/</a> 下载并安装最新版本. 然后将Python 的安装目录(如: C:\Program Files\Python) 添加到PATH环境变量中;</p></li><li><p>安装node-gyp 或将 npm 升级到内含 node-gyp 的版本 (nodejs v0.6.13以上的 npm 已内置了node-gyp, 则此步可以略过);</p></li><li><p>再安装 Visual C++ 2010 Express; 因为需要用到其中的MSBuild 用以编译 cairo 类库到本地代码; 微软官方获取: <a href="http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express" target="_blank" rel="noopener">http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express</a> (VC++下载和安装的过程很漫长,需要耐心等待);</p></li><li><p>还要下载包含 cairo 图形处理库的GTK包: <a href="http://cairographics.org/download/" target="_blank" rel="noopener">http://cairographics.org/download/</a> , 选gtk±bundle_2.24.10-20120208_win32 或最新版,</p></li><li><p>将下载的GTK包解压到 C:\GTK\ 目录(必须是这个目录名,否则接下来的MSBuild编译可能通不过),</p></li><li><p>在Windows环境变量PATH 后添加 C:\GTK\bin 目录 (需要注销Windows重新登录才能全局生效), 以供 canvas 运行时调用cairo的动态链接库 libcairo-2.dll 等;</p></li><li><p>最后 npm install canvas , 期间将自动运行MsBuild 编译生成 canvas.node 本地目标库, 生成的目标库位于 path\to\node_modules\canvas\build\Release\canvas.node;</p></li><li><p>DOS命令行下: CD 进入 canvas\build\Release\ 这个目录, 运行 node 测试canvas是否安装成功: C:\path\to\node\node_modules\canvas\build\Release&gt; node.exe</p></li></ol><p>var canvas = require(’./canvas’);</p><p>若显示 undefined , 而不是错误信息 ,应该就安装成功了. 若显示Unable to load shared library 则可能是 GTK\bin 目录未在PATH路径中,添加上即可.</p><p>按照上篇文章的步骤配置好环境之后，再配置一下cnpm(npm 国内淘宝镜像)<br>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>安装成功后在cmd下 输入 cnpm -version 查看当前cnpm版本信息</p><p>cnpm install qrcode进行安装二维码模块（还有一个简化版的二维码生成模块qrcode-image），出现下列信息说明模块安装成功<br><img src="http://blog-img.muxiao520.com/node-qrcode-1.png" alt="安装信息"></p><p>接下来就是进行我们的DEMO测试:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/qrcode&apos;,function(req,res)&#123;</span><br><span class="line">   var qrcode = require(&quot;qrcode&quot;);</span><br><span class="line">    console.log(&quot;正在进行二维码的绘制。。。&quot;);</span><br><span class="line">    res.writeHead(200,&#123;&quot;Content-Type&quot;:&quot;text/html&quot;&#125;);</span><br><span class="line">    qrcode.toDataURL(&quot;我有一个小秘密就不告诉你&quot;,function(err,url)&#123;</span><br><span class="line">        if(err)&#123;console.log(err);return;&#125;</span><br><span class="line">        res.end(&quot;&lt;!DOCTYPE html/&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&apos;UTF-8&apos;&gt;&lt;title&gt;二维码测试&lt;/title&gt;&lt;/head&gt;&quot; +</span><br><span class="line">            &quot;&lt;body&gt;&lt;p&gt;请扫描下边的二维码完成支付&lt;/p&gt;&lt;img src=&apos;&quot;+url+&quot;&apos;/&gt;&lt;/body&gt;&lt;/html&gt;&quot;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在浏览器里访问<a href="http://localhost:3000/qrcode，得到如下二维码，可以拿微信扫一下看信息" target="_blank" rel="noopener">http://localhost:3000/qrcode，得到如下二维码，可以拿微信扫一下看信息</a><br><img src="http://blog-img.muxiao520.com/node-qrcode-2.png" alt="二维码"></p><h4 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h4><p>做完二维码之后突然就想到了验证码，于是乎，小爷我就又查找了一下window下如何使用node实现二维码验证，然后就发现了一个模块，惊喜万分，赶快尝试一下，come on;<br>使用cnpm进行模块安装：cnpm install ccap<br>参考：<a href="https://github.com/DoubleSpout/ccap" target="_blank" rel="noopener">https://github.com/DoubleSpout/ccap</a><br>很顺利的就安装成功了，接下来我们测试一发吧。。。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/authCodePic&apos;,function(req,res)&#123;</span><br><span class="line">    var ccap = require(&apos;ccap&apos;);//Instantiated ccap class</span><br><span class="line">    var authCode = ccap();</span><br><span class="line">    var ary = authCode.get();</span><br><span class="line">    authCodeString = ary[0];</span><br><span class="line">    var buf = ary[1];</span><br><span class="line">    res.end(buf);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">请输入验证码：&lt;input type=&quot;text&quot; /&gt;&lt;img onclick=&quot;reloadPic();&quot; id=&quot;myPicCode&quot; src=&quot;http://localhost:3080/authCodePic&quot;/&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    function reloadPic()&#123;</span><br><span class="line">        var x=document.getElementById(&quot;myPicCode&quot;);</span><br><span class="line">        x.setAttribute(&apos;src&apos;,&apos;http://localhost:3080/authCodePic?&apos;+Math.random());</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>完事，看一下效果如何，在浏览器输入<a href="http://localhost:3000/authCodePic,效果如下" target="_blank" rel="noopener">http://localhost:3000/authCodePic,效果如下</a>:<br><img src="http://blog-img.muxiao520.com/node-qrcode-3.png" alt="验证码"></p><p>哎呦不错哦，OK，小伙伴们也来尝试一发吧。。。。</p><p>引自:<br><a href="http://blog.163.com/hule_sky/blog/static/2091622452016666034731/" target="_blank" rel="noopener">网易博客(奔跑吧~昭熙小乐)-Windows 下成功安装qrcode,node-canvas实现二维码的操作</a><br><a href="http://blog.163.com/hule_sky/blog/static/20916224520166764614192/" target="_blank" rel="noopener">网易博客(奔跑吧~昭熙小乐)-Window下node实现二维码续 + 验证码</a><br>参考:<br><a href="https://cnodejs.org/topic/505080cb5aa28e09430d89b0" target="_blank" rel="noopener">https://cnodejs.org/topic/505080cb5aa28e09430d89b0</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --&gt;&lt;h4 id=&quot;二维码&quot;&gt;&lt;a href=&quot;#二维码&quot; class=&quot;headerlink&quot; title=&quot;二维码&quot;&gt;&lt;/a&gt;二维码&lt;/h4&gt;&lt;ol&gt;
      
    
    </summary>
    
      <category term="Nodejs" scheme="http://blog.hully.fun/categories/Nodejs/"/>
    
    
      <category term="Node" scheme="http://blog.hully.fun/tags/Node/"/>
    
      <category term="qrcode" scheme="http://blog.hully.fun/tags/qrcode/"/>
    
      <category term="node-canvas" scheme="http://blog.hully.fun/tags/node-canvas/"/>
    
  </entry>
  
  <entry>
    <title>Mongodb insert 插入数据之 重复键 处理</title>
    <link href="http://blog.hully.fun/Mongodb%20insert%20%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E4%B9%8B%20%E9%87%8D%E5%A4%8D%E9%94%AE%20%E5%A4%84%E7%90%86.html"/>
    <id>http://blog.hully.fun/Mongodb insert 插入数据之 重复键 处理.html</id>
    <published>2016-03-27T16:00:00.000Z</published>
    <updated>2018-01-20T10:16:07.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --><p>源代码：<br>var lgInfor={title:””,content:””,time:””,style:””};<br>然后进行循环调用以下代码:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function(username,callback) &#123;</span><br><span class="line">   lgInfor.style = &quot;大学&quot;;</span><br><span class="line">   lgInfor.grade = &quot;大一&quot;;</span><br><span class="line">   lgInfor.time = new Date();</span><br><span class="line">   lgInfor.content = username;</span><br><span class="line">   this.db.insert(collectionName, lgInfor, function (err, data) &#123;</span><br><span class="line">      if (err) &#123;</span><br><span class="line">         console.log(err);</span><br><span class="line">         return;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">         console.log(username + &quot; 注册成功&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   this.db.insert(collectionName, username, callback);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>此时调用的时候第一次没什么问题，当第二次调用的时候会出现以下问题:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123; [MongoError: E11000 duplicate key error index: test.User.$_id_  dup key: &#123; : ObjectId(&apos;5362235c895105241d43c46e&apos;) &#125;]</span><br><span class="line">  name: &apos;MongoError&apos;,</span><br><span class="line">  err: &apos;E11000 duplicate key error index: test.User.$_id_  dup key: &#123; : ObjectId(\&apos;5362235c895105241d43c46e\&apos;) &#125;&apos;,</span><br><span class="line">  code: 11000,</span><br><span class="line">  n: 0,</span><br><span class="line">  connectionId: 1,</span><br><span class="line">  ok: 1 &#125;</span><br></pre></td></tr></table></figure><p></p><p>这是什么意思呢？ 意思就是说 出现了重复了键，可是 对于mongodb来说每次插入一条记录就是新生成一个文档，就会自动生成ObjectId ，应该是唯一的啊，怎么会出现重复的问题呢？</p><p>在网上找了一下答案，说什么清空一下当前集合就可以什么的，尝试了一下 然并卵，不知道是什么驱动着我去修改了一下代码，修改后的代码如下:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function(username,callback) &#123;</span><br><span class="line">   var lgInfor=&#123;&#125;;</span><br><span class="line">   lgInfor.style = &quot;大学&quot;;</span><br><span class="line">   lgInfor.grade = &quot;大一&quot;;</span><br><span class="line">   lgInfor.time = new Date();</span><br><span class="line">   lgInfor.content = username;</span><br><span class="line">   this.db.insert(collectionName, lgInfor, function (err, data) &#123;</span><br><span class="line">      if (err) &#123;</span><br><span class="line">         console.log(err);</span><br><span class="line">         return;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">         console.log(username + &quot; 注册成功&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   this.db.insert(collectionName, username, callback);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>仅仅是把在外边定义的变量拿到里边而已，问题就解决了，虽然问题是解决了，但是原理还不是很清楚哎，于是又search了一下，有一姐们(看ID猜测)给出了如是答案(php中):</p><p>—&gt;&gt;”把定义$data放到foreach里面，否则mongodb会认为是同一条记录重复插入”&lt;&lt;—</p><p>但是具体为什么mongodb会认为是同一条记录重复插入呢，还是不知道哎，哪位大神知道愿指点小弟一番，小弟感激涕零</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;源代码：&lt;br&gt;var lgInfor={title:””,content:””,time:””,style:””};&lt;br&gt;然后进行循环调用以
      
    
    </summary>
    
      <category term="Nodejs" scheme="http://blog.hully.fun/categories/Nodejs/"/>
    
    
      <category term="Node" scheme="http://blog.hully.fun/tags/Node/"/>
    
      <category term="MongoDB" scheme="http://blog.hully.fun/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>花明又一村</title>
    <link href="http://blog.hully.fun/%E8%8A%B1%E6%98%8E%E5%8F%88%E4%B8%80%E6%9D%91.html"/>
    <id>http://blog.hully.fun/花明又一村.html</id>
    <published>2016-02-15T16:00:00.000Z</published>
    <updated>2018-01-20T12:42:55.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --><p>&emsp;&emsp;世人常赞叹‘明知山有虎偏往虎山行’的勇气，可在我看来此乃愚者之举、莽夫所为，此乃使自己处于那山重水复疑无路之境的庸为。相反如果懂得变通，不鲁莽行事，走那乡间小道，则自会柳暗花明又一村。</p><p>&emsp;&emsp;懂得变通是智者之为智者的一大法宝。</p><p>&emsp;&emsp;面对饱受欺凌的祖国，面对封建腐愚、麻木冷笑的国民，他知道高超的医术拯救不了受苦受难的祖国，唤醒不了那些麻木的国民。他深深地明白只有改变人们的思想意识，解放人们的思想才能从根本上拯救我们的祖国，拯救我们的名族。于是他弃医从文，挺起笔杆与国家的利益站在一起，与那些封建腐愚的思想作斗争。用他的笔痛击每一位沉睡中的国民，深刺每一位国民的麻木之心。从此一头沉睡的雄狮慢慢的苏醒了，整个世界为之一憾。</p><p>&emsp;&emsp;学会变通是智者名扬千古的秘籍。</p><p>&emsp;&emsp;当他知道勾践只可以共患难而不可以同富贵之时，当他知道上大夫文仲被杀害之时，他毅然决然的离开了勾践弃官从商，远离那虎狼之穴，游览于静谧山谷之中。聪明的他不仅仅保住了自己的安全，同时也创造了巨大的财富，为后人留下一段佳话。</p><p>&emsp;&emsp;鲁迅懂得变通得以使得东方睡狮慢慢的苏醒，才有的雄关漫道真如铁，才有的中华人民共和国的成立，才有的今日我中华民族的富强；范蠡懂的变通才得以不为黑暗统治下的刀下之魂，才得以山水间悠然恬淡抱得美人赏花赋词，才得以成为富可敌国的一代传奇。如果他们不懂得变通，那结果又会是怎么样呢？或死于炮火战乱之中，最终为孤村野魂。</p><p>&emsp;&emsp;加拿大航天局不晓得变通，花费巨资研制出无用之物，结果让人耻笑；艾尔基尔猴子不晓得变通，贪念于瓶中一把米粒而束手就擒，实乃悲哉！</p><p>&emsp;&emsp;学会变通，雨后会有美丽的彩虹，变通会引导你一步一步的迈向成功，达到世界的顶峰。变通可以唤醒久未启的梦，让您乘着飘逸的风，飞向更高更远的天空。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&amp;emsp;&amp;emsp;世人常赞叹‘明知山有虎偏往虎山行’的勇气，可在我看来此乃愚者之举、莽夫所为，此乃使自己处于那山重水复疑无路之境的庸为。相
      
    
    </summary>
    
      <category term="小文章" scheme="http://blog.hully.fun/categories/%E5%B0%8F%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="文章" scheme="http://blog.hully.fun/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>关于JavaScript 变量的定义与解析</title>
    <link href="http://blog.hully.fun/%E5%85%B3%E4%BA%8EJavaScript%20%E5%8F%98%E9%87%8F%E7%9A%84%E5%AE%9A%E4%B9%89%20%E4%B8%8E%20%E8%A7%A3%E6%9E%90.html"/>
    <id>http://blog.hully.fun/关于JavaScript 变量的定义 与 解析.html</id>
    <published>2016-02-14T16:00:00.000Z</published>
    <updated>2018-01-22T02:11:42.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --><h5 id="Javascript-执行顺序探究"><a href="#Javascript-执行顺序探究" class="headerlink" title="Javascript 执行顺序探究"></a>Javascript 执行顺序探究</h5><p>案例一:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    alert(a);</span><br><span class="line">    var a=1;</span><br><span class="line">    alert(a);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p></p><p>弹窗弹出顺序 undefined-&gt;1;<br>解释:<br>javascript在执行前会进行类似“预编译”的操作，首先会创建一个当前执行环境下的活动对象，并将那些用var声明的变量设置为活动对象的属性，并赋值为undefined；<br>执行阶段，javascript是按照代码的先后顺序进行执行的，当遇到变量需要解析时，会首先从当前执行环境的活动对象中查找，如果没有找到而且该执行环境的拥有者有prototype属性时，则会从 prototype链中查找，否则将会按照作用域链查找。遇到var a = 1；这样的类赋值语句时会给相应的变量进行赋值（注意：变量的赋值是在执行阶段完成的，如果在这之前使用变量，它的值会是undefined）；</p><p>根据上边的解释，则可以清楚的分析案例一的执行流程: 当文档加载结束后，首先进行预编译，将a设置为当前活动对象(window)的属性，并赋值为undefined,然后到了执行阶段，进行第一行的代码执行此时的a为undefined，故而弹出框中弹出的内容为undefined,然后走到第二行代码对a 进行赋值，此时a变为1，走第三行的时候弹出1；</p><p>案例二:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;    </span><br><span class="line">    //alert(&apos;a&apos; in window);--&gt;false</span><br><span class="line">    //alert(&apos;prototype&apos; in window);--&gt;false;</span><br><span class="line">    alert(a);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p></p><p>此时在chrom中不出现弹出框并报错为Uncaught ReferenceError: a is not defined;<br>firefox中不出现弹出框并报错为ReferenceError: a is not defined;<br>当文档加载完成后，没有发现var对变量的声明，进入执行，当遇到a时，进行去对window 查找，无果，window里又不存在prototype,找到最后也没有找到关于a 的信息，然后就只能告诉你 a is not defined;</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --&gt;&lt;h5 id=&quot;Javascript-执行顺序探究&quot;&gt;&lt;a href=&quot;#Javascript-执行顺序探究&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.hully.fun/categories/JavaScript/"/>
    
    
      <category term="javascript" scheme="http://blog.hully.fun/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>五柳先生</title>
    <link href="http://blog.hully.fun/%E4%BA%94%E6%9F%B3%E5%85%88%E7%94%9F.html"/>
    <id>http://blog.hully.fun/五柳先生.html</id>
    <published>2016-02-13T16:00:00.000Z</published>
    <updated>2018-01-20T12:45:19.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --><p>&emsp;&emsp;也许你一生的名声便是你一生的铭记、一生的宿命。你埋没于世间滚滚风尘中，潜进那自由的心灵家园里。俗世寻不见你的神采，九泉却掩不尽你的魂风。千百年后，你浮现于我面前，你，陶潜，那南山下的采菊老人，却似无意地携走了我心间的一瓣菊香。</p><p>&emsp;&emsp;初识你是在你的家，桃花源中五柳后的小居。你的家在一片与世无争的静谧的土地上，在阡陌交通的鸡犬相闻间。我叹你如何寻得这一方净土，山也清秀，水也清丽；人皆安详，心皆安详。你欣然的右手执卷，左手牵壶，来往于这片山水田园间，微醉的身影挪移着，映在那些池竹稻麦上。壶中的可是那忘忧醒神的酒，让你“悟以往之不谏，知来者之可追”，手中可是那千年间无人阅懂的丹书妙卷，唯让你不求甚解的会意去了其中的快乐？人世间没有你陶渊明，可你到底身处天地间，身处那一片桃花源。</p><p>&emsp;&emsp;你忆起归家的情景，欢喜与释然写在脸上。荒芜的山径，还依稀留着些一般不愿随流而去的松菊。仆童相迎，他们身后还有你尚未更事的孩子倚在门边。当然，还有使人敞怀的好酒在杯中等候。你坚定的说：“隐，我没有选错”。</p><p>&emsp;&emsp;是啊，多少人试图作出这样的选择，可走出的又有几个，出而不复的又有几何？心不够恬淡，哪怕是淡泊明志的诸葛孔明也坚守不住那一亩三分净土。却唯有你，为那一壶一卷与世决裂，自己把自己“关”了起来，着实为自己创造了一个无限恢弘的新世界。</p><p>&emsp;&emsp;我仰视着你释怀的神话，坚信着包容万物而无染的心胸的存在。还有你的文章，隐退尽了锋芒而泛着桃花源间的落英之芳与东篱黄花秋芳之味的气息。我心中的英雄，愿与你一起壶卷于手，坦然于胸，品一香茗于东篱之下。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Nov 06 2019 17:10:45 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&amp;emsp;&amp;emsp;也许你一生的名声便是你一生的铭记、一生的宿命。你埋没于世间滚滚风尘中，潜进那自由的心灵家园里。俗世寻不见你的神采，九泉却
      
    
    </summary>
    
      <category term="小文章" scheme="http://blog.hully.fun/categories/%E5%B0%8F%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="文章" scheme="http://blog.hully.fun/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
</feed>
